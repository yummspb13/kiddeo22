const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function exportData() {
  try {
    console.log('üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...');
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const exportDir = `exports/export-${timestamp}`;
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if (!fs.existsSync('exports')) {
      fs.mkdirSync('exports');
    }
    fs.mkdirSync(exportDir);
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞
    const cities = await prisma.city.findMany();
    fs.writeFileSync(
      path.join(exportDir, 'cities.json'), 
      JSON.stringify(cities, null, 2)
    );
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await prisma.category.findMany();
    fs.writeFileSync(
      path.join(exportDir, 'categories.json'), 
      JSON.stringify(categories, null, 2)
    );
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
    const events = await prisma.afishaEvent.findMany();
    fs.writeFileSync(
      path.join(exportDir, 'events.json'), 
      JSON.stringify(events, null, 2)
    );
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–∞
    const venues = await prisma.venuePartner.findMany();
    fs.writeFileSync(
      path.join(exportDir, 'venues.json'), 
      JSON.stringify(venues, null, 2)
    );
    
    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ ${exportDir}/`);
    console.log(`üìÅ –§–∞–π–ª—ã: cities.json, categories.json, events.json, venues.json`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

exportData();
