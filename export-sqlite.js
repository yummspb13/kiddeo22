#!/usr/bin/env node

/**
 * export-sqlite.js - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ sqlite3
 */

const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

async function exportData() {
  console.log('üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ sqlite3...')
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const tablesOutput = execSync('sqlite3 prisma/dev.db ".tables"', { encoding: 'utf8' })
    const tables = tablesOutput.trim().split(/\s+/).filter(table => 
      table && 
      !table.startsWith('sqlite_') && 
      !table.startsWith('_prisma_') &&
      table !== 'new_VenueView' // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    )
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:')
    tables.forEach(table => console.log(`   - ${table}`))
    
    const data = {}
    let totalRecords = 0
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    for (const table of tables) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        const recordsOutput = execSync(`sqlite3 prisma/dev.db -json "SELECT * FROM ${table}"`, { encoding: 'utf8' })
        const records = JSON.parse(recordsOutput)
        
        data[table] = records
        totalRecords += records.length
        console.log(`‚úÖ ${table}: ${records.length} –∑–∞–ø–∏—Å–µ–π`)
        
      } catch (error) {
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`)
        data[table] = []
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
    const exportPath = path.join(__dirname, 'database-export.json')
    fs.writeFileSync(exportPath, JSON.stringify(data, null, 2))
    
    console.log(`\n‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: ${exportPath}`)
    
    // –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log(`\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
    console.log(`   - –¢–∞–±–ª–∏—Ü: ${Object.keys(data).length}`)
    console.log(`   - –ó–∞–ø–∏—Å–µ–π: ${totalRecords}`)

    return data

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error)
    throw error
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...')
  
  try {
    await exportData()
    console.log('\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main()
}

module.exports = { exportData }
