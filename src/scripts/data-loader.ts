import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
interface EventData {
  title: string;
  description?: string;
  image: string;
  gallery?: string; // –ì–∞–ª–µ—Ä–µ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  tickets?: string; // –ë–∏–ª–µ—Ç—ã (JSON —Å—Ç—Ä–æ–∫–∞)
  startDate: string;
  endDate?: string;
  location: string;
  organizer: string;
  minPrice?: number;
  maxPrice?: number;
  isPaid: boolean;
  city: string;
  citySlug?: string; // –°–ª–∞–≥ –≥–æ—Ä–æ–¥–∞
  category: string;
  categoryId?: number; // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  coordinates?: string;
  ageFrom?: number;
  ageTo?: number;
  ageGroups?: string[];
  isPopular?: boolean;
  isPromoted?: boolean;
  priority?: number;
  status?: string; // –°—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  order?: number; // –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  quickFilterIds?: string; // ID –±—ã—Å—Ç—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  richDescription?: string;
  // –ë–∏–ª–µ—Ç—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
  ticketTypes?: {
    name: string;
    price: number;
    currency?: string;
  }[];
}

interface VenueData {
  name: string;
  description?: string;
  image: string;
  additionalImages?: string; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
  location: string;
  district?: string;
  metro?: string;
  priceFrom?: number;
  priceTo?: number;
  city: string;
  citySlug?: string; // –°–ª–∞–≥ –≥–æ—Ä–æ–¥–∞
  subcategory: string;
  subcategoryId?: number; // ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  coordinates?: string;
  ageFrom?: number;
  ageTo?: number;
  tariff?: 'FREE' | 'SUPER' | 'MAXIMUM'; // –¢–∞—Ä–∏—Ñ
  status?: 'ACTIVE' | 'MODERATION' | 'HIDDEN'; // –°—Ç–∞—Ç—É—Å
  moderationReason?: string; // –ü—Ä–∏—á–∏–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
  timezone?: string; // –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
  fiasId?: string; // –§–ò–ê–° ID
  kladrId?: string; // –ö–õ–ê–î–† ID
  workingHours?: string; // –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
  richDescription?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
export async function loadEventsFromFile(filePath: string) {
  try {
    console.log(`üìÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    const eventsData: EventData[] = JSON.parse(fileContent);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${eventsData.length} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const eventData of eventsData) {
      try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug
        let slug = eventData.title
          .toLowerCase()
          .replace(/[^a-z0-9–∞-—è\s]/g, '')
          .replace(/\s+/g, '-')
          .substring(0, 50);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
        let counter = 1;
        let originalSlug = slug;
        while (await prisma.afishaEvent.findUnique({ where: { slug } })) {
          slug = `${originalSlug}-${counter}`;
          counter++;
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        const event = await prisma.afishaEvent.create({
          data: {
            title: eventData.title,
            slug: slug,
            description: eventData.description || null,
            coverImage: eventData.image,
            gallery: eventData.gallery || null,
            tickets: eventData.tickets || null,
            venue: eventData.location,
            organizer: eventData.organizer,
            startDate: eventData.startDate ? new Date(eventData.startDate) : null,
            endDate: eventData.endDate ? new Date(eventData.endDate) : null,
            minPrice: eventData.minPrice || null,
            isPaid: eventData.isPaid,
            city: eventData.city,
            citySlug: eventData.citySlug || null,
            categoryName: eventData.category,
            categoryId: eventData.categoryId || null,
            coordinates: eventData.coordinates || null,
            ageFrom: eventData.ageFrom || null,
            ageTo: eventData.ageTo || null,
            ageGroups: eventData.ageGroups ? JSON.stringify(eventData.ageGroups) : null,
            isPopular: eventData.isPopular || false,
            isPromoted: eventData.isPromoted || false,
            priority: eventData.priority || 5,
            status: eventData.status || 'active',
            order: eventData.order || 0,
            quickFilterIds: eventData.quickFilterIds || null,
            richDescription: eventData.richDescription || null,
            viewCount: 0,
            searchText: `${eventData.title} ${eventData.description || ''} ${eventData.location}`.toLowerCase(),
            createdAt: new Date(),
            updatedAt: new Date(),
          }
        });
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã –±–∏–ª–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (eventData.ticketTypes && eventData.ticketTypes.length > 0) {
          for (const ticketType of eventData.ticketTypes) {
            await prisma.eventTicketType.create({
              data: {
                eventId: event.id,
                name: ticketType.name,
                price: ticketType.price,
                currency: ticketType.currency || 'RUB',
              }
            });
          }
        }
        
        console.log(`‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ${event.title}`);
        successCount++;
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "${eventData.title}":`, error);
        errorCount++;
      }
    }
    
    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Å—Ç
export async function loadVenuesFromFile(filePath: string) {
  try {
    console.log(`üè¢ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    const venuesData: VenueData[] = JSON.parse(fileContent);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${venuesData.length} –º–µ—Å—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const venueData of venuesData) {
      try {
        // –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        let lat = null;
        let lng = null;
        if (venueData.coordinates) {
          const coords = venueData.coordinates.split(',');
          if (coords.length === 2) {
            lat = parseFloat(coords[0].trim());
            lng = parseFloat(coords[1].trim());
          }
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        const slug = venueData.name
          .toLowerCase()
          .replace(/[^a-z0-9–∞-—è\s]/g, '')
          .replace(/\s+/g, '-')
          .substring(0, 50);
        
        // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º vendor (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)
        const existingVendor = await prisma.vendor.findFirst();
        if (!existingVendor) {
          console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω vendor –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–æ–∑–¥–∞–π—Ç–µ vendor –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –º–µ—Å—Ç.');
          continue;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º subcategoryId (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)
        const existingSubcategory = await prisma.venueSubcategory.findFirst();
        if (!existingSubcategory) {
          console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ subcategory –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–æ–∑–¥–∞–π—Ç–µ subcategory –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –º–µ—Å—Ç.');
          continue;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º city (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
        const existingCity = await prisma.city.findFirst();
        if (!existingCity) {
          console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω city –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–æ–∑–¥–∞–π—Ç–µ city –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –º–µ—Å—Ç.');
          continue;
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–µ—Å—Ç–æ
        const venue = await prisma.venuePartner.create({
          data: {
            name: venueData.name,
            slug: slug,
            description: venueData.description || null,
            coverImage: venueData.image,
            additionalImages: venueData.additionalImages || null,
            address: venueData.location,
            district: venueData.district || null,
            metro: venueData.metro || null,
            priceFrom: venueData.priceFrom || null,
            priceTo: venueData.priceTo || null,
            tariff: venueData.tariff || 'FREE',
            status: venueData.status || 'ACTIVE',
            moderationReason: venueData.moderationReason || null,
            timezone: venueData.timezone || null,
            fiasId: venueData.fiasId || null,
            kladrId: venueData.kladrId || null,
            workingHours: venueData.workingHours || null,
            city: {
              connect: { id: existingCity.id }
            },
            subcategory: {
              connect: { id: existingSubcategory.id }
            },
            vendor: {
              connect: { id: existingVendor.id }
            },
            lat: lat,
            lng: lng,
            ageFrom: venueData.ageFrom || null,
            ageTo: venueData.ageTo || null,
            richDescription: venueData.richDescription || null,
            createdAt: new Date(),
            updatedAt: new Date(),
          }
        });
        
        console.log(`‚úÖ –ú–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–æ: ${venue.name}`);
        successCount++;
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Å—Ç–∞ "${venueData.name}":`, error);
        errorCount++;
      }
    }
    
    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Å—Ç:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Å—Ç:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
export async function clearEventsAndVenues() {
  try {
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
    
    // –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    const deletedEvents = await prisma.afishaEvent.deleteMany();
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${deletedEvents.count}`);
    
    // –£–¥–∞–ª—è–µ–º –º–µ—Å—Ç–∞
    const deletedVenues = await prisma.venuePartner.deleteMany();
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –º–µ—Å—Ç: ${deletedVenues.count}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
function detectFileType(filePath: string): 'events' | 'venues' {
  const content = fs.readFileSync(filePath, 'utf-8');
  const data = JSON.parse(content);
  
  if (Array.isArray(data) && data.length > 0) {
    const firstItem = data[0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    if (firstItem.title && (firstItem.startDate || firstItem.organizer)) {
      return 'events';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –º–µ—Å—Ç
    if (firstItem.name && (firstItem.location || firstItem.address)) {
      return 'venues';
    }
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª–æ–º –º–µ—Å—Ç
  return 'venues';
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
export async function loadDataFromFiles(eventsFile?: string, venuesFile?: string, clearFirst = false) {
  try {
    if (clearFirst) {
      await clearEventsAndVenues();
    }
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ —Ç–∏–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (eventsFile && !venuesFile) {
      const fileType = detectFileType(eventsFile);
      console.log(`üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Ñ–∞–π–ª–∞: ${fileType}`);
      
      if (fileType === 'events') {
        await loadEventsFromFile(eventsFile);
      } else {
        await loadVenuesFromFile(eventsFile);
      }
    } else {
      if (eventsFile) {
        await loadEventsFromFile(eventsFile);
      }
      
      if (venuesFile) {
        await loadVenuesFromFile(venuesFile);
      }
    }
    
    console.log('\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ (–µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
if (require.main === module) {
  const eventsFile = process.argv[2];
  const venuesFile = process.argv[3];
  const clearFirst = process.argv[4] === '--clear';
  
  loadDataFromFiles(eventsFile, venuesFile, clearFirst);
}
