import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
export async function exportEventsToFile(outputPath: string) {
  try {
    console.log('üìÖ –í—ã–≥—Ä—É–∂–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è...');
    
    const events = await prisma.afishaEvent.findMany({
      select: {
        id: true,
        title: true,
        description: true,
        coverImage: true,
        startDate: true,
        endDate: true,
        venue: true,
        organizer: true,
        minPrice: true,
        isPaid: true,
        city: true,
        categoryName: true,
        coordinates: true,
        ageFrom: true,
        ageTo: true,
        ageGroups: true,
        isPopular: true,
        isPromoted: true,
        priority: true,
        richDescription: true,
        viewCount: true,
        createdAt: true,
        updatedAt: true,
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${events.length} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π`);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportData = events.map(event => ({
      title: event.title,
      description: event.description,
      image: event.coverImage,
      startDate: event.startDate ? event.startDate.toISOString() : null,
      endDate: event.endDate ? event.endDate.toISOString() : null,
      location: event.venue,
      organizer: event.organizer,
      minPrice: event.minPrice,
      isPaid: event.isPaid,
      city: event.city,
      category: event.categoryName,
      coordinates: event.coordinates,
      ageFrom: event.ageFrom,
      ageTo: event.ageTo,
      ageGroups: event.ageGroups ? JSON.parse(event.ageGroups) : null,
      isPopular: event.isPopular,
      isPromoted: event.isPromoted,
      priority: event.priority,
      richDescription: event.richDescription,
      viewCount: event.viewCount,
      createdAt: event.createdAt ? event.createdAt.toISOString() : null,
      updatedAt: event.updatedAt ? event.updatedAt.toISOString() : null,
    }));
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const dir = path.dirname(outputPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    fs.writeFileSync(outputPath, JSON.stringify(exportData, null, 2), 'utf-8');
    
    console.log(`‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: ${outputPath}`);
    console.log(`üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(fs.statSync(outputPath).size / 1024).toFixed(2)} KB`);
    
    return exportData;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –º–µ—Å—Ç
export async function exportVenuesToFile(outputPath: string) {
  try {
    console.log('üè¢ –í—ã–≥—Ä—É–∂–∞–µ–º –º–µ—Å—Ç–∞...');
    
    const venues = await prisma.venuePartner.findMany({
      select: {
        id: true,
        name: true,
        description: true,
        coverImage: true,
        address: true,
        district: true,
        metro: true,
        priceFrom: true,
        priceTo: true,
        city: true,
        subcategory: true,
        lat: true,
        lng: true,
        ageFrom: true,
        ageTo: true,
        richDescription: true,
        createdAt: true,
        updatedAt: true,
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${venues.length} –º–µ—Å—Ç`);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportData = venues.map(venue => ({
      name: venue.name,
      description: venue.description,
      image: venue.coverImage,
      location: venue.address,
      district: venue.district,
      metro: venue.metro,
      priceFrom: venue.priceFrom,
      priceTo: venue.priceTo,
      city: venue.city,
      subcategory: venue.subcategory,
      coordinates: venue.lat && venue.lng ? `${venue.lat},${venue.lng}` : null,
      ageFrom: venue.ageFrom,
      ageTo: venue.ageTo,
      richDescription: venue.richDescription,
      createdAt: venue.createdAt ? venue.createdAt.toISOString() : null,
      updatedAt: venue.updatedAt ? venue.updatedAt.toISOString() : null,
    }));
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const dir = path.dirname(outputPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    fs.writeFileSync(outputPath, JSON.stringify(exportData, null, 2), 'utf-8');
    
    console.log(`‚úÖ –ú–µ—Å—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: ${outputPath}`);
    console.log(`üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(fs.statSync(outputPath).size / 1024).toFixed(2)} KB`);
    
    return exportData;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –º–µ—Å—Ç:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
export async function exportAllData(eventsPath?: string, venuesPath?: string) {
  try {
    console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...\n');
    
    const timestamp = new Date().toISOString().split('T')[0];
    
    if (eventsPath) {
      await exportEventsToFile(eventsPath);
      console.log('');
    }
    
    if (venuesPath) {
      await exportVenuesToFile(venuesPath);
      console.log('');
    }
    
    console.log('üéâ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
if (require.main === module) {
  const eventsPath = process.argv[2] || `./src/data/exported-events-${new Date().toISOString().split('T')[0]}.json`;
  const venuesPath = process.argv[3] || `./src/data/exported-venues-${new Date().toISOString().split('T')[0]}.json`;
  
  exportAllData(eventsPath, venuesPath);
}
