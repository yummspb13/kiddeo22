'use client'

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
export class SessionManager {
  private static instance: SessionManager
  private currentUserId: string | null = null
  private sessionId: string | null = null
  private broadcastChannel: BroadcastChannel | null = null

  static getInstance(): SessionManager {
    if (!SessionManager.instance) {
      SessionManager.instance = new SessionManager()
    }
    return SessionManager.instance
  }

  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BroadcastChannel –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
    if (typeof window !== 'undefined' && 'BroadcastChannel' in window) {
      this.broadcastChannel = new BroadcastChannel('session-sync')
      this.broadcastChannel.addEventListener('message', this.handleBroadcastMessage.bind(this))
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è localStorage
    if (typeof window !== 'undefined') {
      window.addEventListener('storage', this.handleStorageChange.bind(this))
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async initializeSession(userId: string): Promise<void> {
    console.log('üîÑ SessionManager: Initializing session for user:', userId)
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    if (this.currentUserId && this.currentUserId !== userId) {
      console.log('üîÑ SessionManager: Different user detected, clearing data')
      await this.clearAllData()
    }

    this.currentUserId = userId
    this.sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
    localStorage.setItem('currentUserId', userId)
    localStorage.setItem('sessionId', this.sessionId)
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.broadcastMessage('USER_LOGIN', { userId, sessionId: this.sessionId })
    
    console.log('‚úÖ SessionManager: Session initialized', { userId, sessionId: this.sessionId })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
   */
  isSessionValid(userId: string): boolean {
    const storedUserId = localStorage.getItem('currentUserId')
    const storedSessionId = localStorage.getItem('sessionId')
    
    if (!storedUserId || !storedSessionId) {
      return false
    }

    if (storedUserId !== userId) {
      console.log('‚ö†Ô∏è SessionManager: User mismatch detected')
      return false
    }

    return true
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async clearAllData(): Promise<void> {
    console.log('üßπ SessionManager: Clearing all data')
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.broadcastMessage('USER_LOGOUT', {})
    
    // –û—á–∏—â–∞–µ–º localStorage
    localStorage.clear()
    
    // –û—á–∏—â–∞–µ–º sessionStorage
    sessionStorage.clear()
    
    // –û—á–∏—â–∞–µ–º cookies (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –º–æ–∂–µ–º)
    document.cookie.split(";").forEach((c) => {
      const eqPos = c.indexOf("=")
      const name = eqPos > -1 ? c.substr(0, eqPos) : c
      document.cookie = `${name.trim()}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`
    })
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    this.currentUserId = null
    this.sessionId = null
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    window.location.reload()
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getCurrentUserId(): string | null {
    return this.currentUserId || localStorage.getItem('currentUserId')
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏
   */
  getSessionId(): string | null {
    return this.sessionId || localStorage.getItem('sessionId')
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  async logout(): Promise<void> {
    console.log('üö™ SessionManager: Logging out')
    await this.clearAllData()
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫
   */
  private handleBroadcastMessage(event: MessageEvent): void {
    const { type, data } = event.data
    
    console.log('üì° SessionManager: Received broadcast message', { type, data })
    
    switch (type) {
      case 'USER_LOGIN':
        this.handleUserLogin(data.userId, data.sessionId)
        break
      case 'USER_LOGOUT':
        this.handleUserLogout()
        break
      case 'SESSION_CHANGE':
        this.handleSessionChange(data.userId, data.sessionId)
        break
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π localStorage
   */
  private handleStorageChange(event: StorageEvent): void {
    if (event.key === 'currentUserId' || event.key === 'sessionId') {
      console.log('üíæ SessionManager: Storage changed', { key: event.key, newValue: event.newValue })
      
      if (event.key === 'currentUserId') {
        if (event.newValue && event.newValue !== this.currentUserId) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è –≤ –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥–∫–µ
          this.handleSessionChange(event.newValue, localStorage.getItem('sessionId'))
        } else if (!event.newValue && this.currentUserId) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –≤ –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥–∫–µ
          this.handleUserLogout()
        }
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private handleUserLogin(userId: string, sessionId: string): void {
    console.log('üë§ SessionManager: User login detected', { userId, sessionId })
    
    if (this.currentUserId && this.currentUserId !== userId) {
      // –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      this.clearAllData()
    }
    
    this.currentUserId = userId
    this.sessionId = sessionId
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private handleUserLogout(): void {
    console.log('üëã SessionManager: User logout detected')
    this.currentUserId = null
    this.sessionId = null
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å–µ—Å—Å–∏–∏
   */
  private handleSessionChange(userId: string, sessionId: string | null): void {
    console.log('üîÑ SessionManager: Session change detected', { userId, sessionId })
    
    if (this.currentUserId && this.currentUserId !== userId) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      this.clearAllData()
    }
    
    this.currentUserId = userId
    this.sessionId = sessionId
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –≤–∫–ª–∞–¥–∫–∞–º
   */
  private broadcastMessage(type: string, data: any): void {
    if (this.broadcastChannel) {
      this.broadcastChannel.postMessage({ type, data })
    }
  }
}

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
 */
export function useSessionManager() {
  const sessionManager = SessionManager.getInstance()

  const initializeSession = async (userId: string) => {
    await sessionManager.initializeSession(userId)
  }

  const isSessionValid = (userId: string) => {
    return sessionManager.isSessionValid(userId)
  }

  const clearAllData = async () => {
    await sessionManager.clearAllData()
  }

  const logout = async () => {
    await sessionManager.logout()
  }

  const getCurrentUserId = () => {
    return sessionManager.getCurrentUserId()
  }

  const getSessionId = () => {
    return sessionManager.getSessionId()
  }

  return {
    initializeSession,
    isSessionValid,
    clearAllData,
    logout,
    getCurrentUserId,
    getSessionId
  }
}
