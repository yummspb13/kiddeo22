import { NextRequest } from 'next/server';
import { verifyJWT } from './jwt';

export interface User {
  id: string;
  email: string;
  name: string;
  role: string;
}

export interface Session {
  user: User;
}

// –ó–∞–º–µ–Ω–∞ –¥–ª—è getServerSession
export async function getServerSession(request?: NextRequest): Promise<Session | null> {
  try {
    // –ï—Å–ª–∏ request –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å cookies –∏–∑ headers
    let token;
    if (request) {
      token = request.cookies.get('session')?.value;
    } else {
      // –î–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º cookies() –∏–∑ next/headers
      try {
        const { cookies } = await import('next/headers');
        const cookieStore = await cookies();
        token = cookieStore.get('session')?.value;
      } catch (error) {
        console.log('üîç AUTH-UTILS: Could not get cookies from headers:', error);
        return null;
      }
    }
    
    if (!token) {
      console.log('üîç AUTH-UTILS: No session token found');
      return null;
    }

    console.log('üîç AUTH-UTILS: Verifying JWT token...');
    const payload = await verifyJWT(token);
    
    if (!payload) {
      console.log('üîç AUTH-UTILS: JWT verification failed');
      return null;
    }

    console.log('üîç AUTH-UTILS: JWT verified successfully, user:', payload.sub);
    return {
      user: {
        id: payload.sub,
        email: payload.email,
        name: payload.name,
        role: payload.role
      }
    };
  } catch (error) {
    console.error('üîç AUTH-UTILS: getServerSession error:', error);
    return null;
  }
}

// –ó–∞–º–µ–Ω–∞ –¥–ª—è getToken
export async function getToken(request?: NextRequest): Promise<any> {
  try {
    const token = request?.cookies.get('session')?.value;
    
    if (!token) {
      return null;
    }

    const payload = await verifyJWT(token);
    return payload;
  } catch (error) {
    console.error('getToken error:', error);
    return null;
  }
}
