// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç
let isYandexMapsLoading = false
let isYandexMapsLoaded = false
const loadingCallbacks: (() => void)[] = []
let loadingTimeout: NodeJS.Timeout | null = null

declare global {
  interface Window {
    ymaps: unknown
  }
}

export const loadYandexMaps = (): Promise<void> => {
  return new Promise((resolve, reject) => {
    console.log('üîÑ loadYandexMaps called')
    
    // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (isYandexMapsLoaded && window.ymaps) {
      console.log('‚úÖ Yandex Maps already loaded')
      resolve()
      return
    }

    // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    if (isYandexMapsLoading) {
      console.log('‚è≥ Yandex Maps already loading, adding to queue')
      loadingCallbacks.push(resolve)
      return
    }

    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const existingScript = document.querySelector('script[src*="api-maps.yandex.ru"]')
    if (existingScript) {
      console.log('üìú Existing script found')
      if (window.ymaps) {
        console.log('‚úÖ Existing script already loaded')
        isYandexMapsLoaded = true
        resolve()
        return
      } else {
        console.log('‚è≥ Waiting for existing script to load...')
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        const timeout = setTimeout(() => {
          console.log('‚ùå Timeout waiting for existing script')
          isYandexMapsLoading = false
          reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç'))
        }, 10000) // 10 —Å–µ–∫—É–Ω–¥

        existingScript.addEventListener('load', () => {
          console.log('‚úÖ Existing script loaded')
          clearTimeout(timeout)
          isYandexMapsLoaded = true
          resolve()
        })
        existingScript.addEventListener('error', () => {
          console.log('‚ùå Existing script error')
          clearTimeout(timeout)
          isYandexMapsLoading = false
          reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç'))
        })
        return
      }
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    console.log('üöÄ Starting new script load...')
    isYandexMapsLoading = true

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    loadingTimeout = setTimeout(() => {
      console.log('‚ùå Script load timeout')
      isYandexMapsLoading = false
      reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç'))
    }, 15000) // 15 —Å–µ–∫—É–Ω–¥

    const script = document.createElement('script')
    const apiKey = process.env.NEXT_PUBLIC_YANDEX_MAPS_API_KEY || 'your-yandex-maps-api-key'
    script.src = `https://api-maps.yandex.ru/2.1/?lang=ru_RU&apikey=${apiKey}&load=package.full`
    script.async = true
    
    script.onload = () => {
      console.log('‚úÖ Yandex Maps script loaded successfully')
      
      if (loadingTimeout) {
        clearTimeout(loadingTimeout)
        loadingTimeout = null
      }
      
      isYandexMapsLoading = false
      isYandexMapsLoaded = true
      
      // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∫–æ–ª–ª–±—ç–∫–∏
      loadingCallbacks.forEach(callback => callback())
      loadingCallbacks.length = 0
      
      resolve()
    }
    
    script.onerror = (error) => {
      console.log('‚ùå Script load error:', error)
      
      if (loadingTimeout) {
        clearTimeout(loadingTimeout)
        loadingTimeout = null
      }
      
      isYandexMapsLoading = false
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL
      console.warn('üîÑ –ü–µ—Ä–≤—ã–π URL –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π...')
      const retryScript = document.createElement('script')
      const apiKey = process.env.NEXT_PUBLIC_YANDEX_MAPS_API_KEY || 'your-yandex-maps-api-key'
      retryScript.src = `https://api-maps.yandex.ru/2.1/?lang=ru_RU&apikey=${apiKey}`
      retryScript.async = true
      
      retryScript.onload = () => {
        console.log('‚úÖ Retry script loaded successfully')
        isYandexMapsLoaded = true
        loadingCallbacks.forEach(callback => callback())
        loadingCallbacks.length = 0
        resolve()
      }
      
      retryScript.onerror = (retryError) => {
        console.log('‚ùå Retry script also failed:', retryError)
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏'))
      }
      
      document.head.appendChild(retryScript)
    }

    document.head.appendChild(script)
  })
}

export const isYandexMapsReady = (): boolean => {
  const ready = isYandexMapsLoaded && typeof window.ymaps !== 'undefined'
  console.log('üîç isYandexMapsReady check:', {
    isYandexMapsLoaded,
    windowYmaps: typeof window.ymaps,
    ready
  })
  return ready
}

export const resetYandexMaps = (): void => {
  isYandexMapsLoading = false
  isYandexMapsLoaded = false
  loadingCallbacks.length = 0
  
  if (loadingTimeout) {
    clearTimeout(loadingTimeout)
    loadingTimeout = null
  }
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç
  const scripts = document.querySelectorAll('script[src*="api-maps.yandex.ru"]')
  scripts.forEach(script => script.remove())
  
  // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  if (typeof window !== 'undefined') {
    try {
      delete (window as any).ymaps
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
  }
}
