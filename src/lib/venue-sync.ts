import { prisma } from '@/lib/db'

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É VenuePartner –∏ Listing
 * 
 * VenuePartner - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–ª–æ–π (—á—Ç–æ —Å–æ–∑–¥–∞—é—Ç –≤–µ–Ω–¥–æ—Ä—ã)
 * Listing - –ø—É–±–ª–∏—á–Ω—ã–π —Å–ª–æ–π (—á—Ç–æ –≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
 */

export interface VenuePartnerData {
  id: number
  name: string
  slug: string
  address?: string | null
  coverImage?: string | null
  additionalImages?: string | null
  subcategoryId: number
  vendorId: number
  cityId: number
  tariff: 'FREE' | 'SUPER' | 'MAXIMUM'
  status: 'ACTIVE' | 'MODERATION' | 'HIDDEN'
  moderationReason?: string | null
  district?: string | null
  metro?: string | null
  lat?: number | null
  lng?: number | null
  postalCode?: string | null
  timezone?: string | null
  fiasId?: string | null
  kladrId?: string | null
  createdAt: Date
  updatedAt: Date
  subcategory: {
    id: number
    name: string
    slug: string
    type: 'PLACE' | 'SERVICE'
    category: {
      id: number
      name: string
    }
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å Listing –Ω–∞ –æ—Å–Ω–æ–≤–µ VenuePartner
 */
export async function createListingFromVenuePartner(venuePartner: VenuePartnerData) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ—Å—Ç–∞" –¥–ª—è –≤—Å–µ—Ö VenuePartner
    const placesCategory = await prisma.category.findFirst({
      where: { name: '–ú–µ—Å—Ç–∞' }
    })

    if (!placesCategory) {
      throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ—Å—Ç–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø Listing –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const listingType = venuePartner.subcategory.type === 'SERVICE' ? 'SERVICE' : 'VENUE'

    // –°–æ–∑–¥–∞–µ–º Listing
    const listing = await prisma.listing.create({
      data: {
        vendorId: venuePartner.vendorId,
        cityId: venuePartner.cityId,
        categoryId: placesCategory.id,
        type: listingType,
        bookingMode: 'INSTANT', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        title: venuePartner.name,
        slug: venuePartner.slug,
        description: null, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∂–µ
        address: venuePartner.address,
        lat: venuePartner.lat,
        lng: venuePartner.lng,
        district: venuePartner.district,
        isActive: true,
        isFree: venuePartner.tariff === 'FREE',
        isIndoor: null, // –ú–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        images: (() => {
          const images = [];
          if (venuePartner.coverImage) {
            images.push(venuePartner.coverImage);
          }
          if (venuePartner.additionalImages) {
            try {
              const additionalImages = JSON.parse(venuePartner.additionalImages);
              if (Array.isArray(additionalImages)) {
                images.push(...additionalImages);
              }
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ additionalImages:', error);
            }
          }
          return images.length > 0 ? JSON.stringify(images) : null;
        })(),
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        ageFrom: null,
        ageTo: null,
        priceFrom: null,
        priceTo: null,
        eventDate: null,
        eventEndDate: null,
        claimable: false,
        claimStatus: 'PENDING'
      }
    })

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω Listing ${listing.id} –¥–ª—è VenuePartner ${venuePartner.id}`)
    return listing

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Listing –∏–∑ VenuePartner:', error)
    throw error
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å Listing –Ω–∞ –æ—Å–Ω–æ–≤–µ VenuePartner
 */
export async function updateListingFromVenuePartner(venuePartner: VenuePartnerData) {
  try {
    // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Listing –ø–æ slug
    const existingListing = await prisma.listing.findFirst({
      where: {
        slug: venuePartner.slug,
        vendorId: venuePartner.vendorId,
        cityId: venuePartner.cityId
      }
    })

    if (!existingListing) {
      console.log(`‚ö†Ô∏è Listing –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è VenuePartner ${venuePartner.id}, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π`)
      return await createListingFromVenuePartner(venuePartner)
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º Listing
    const updatedListing = await prisma.listing.update({
      where: { id: existingListing.id },
      data: {
        title: venuePartner.name,
        address: venuePartner.address,
        lat: venuePartner.lat,
        lng: venuePartner.lng,
        district: venuePartner.district,
        isActive: venuePartner.status === 'ACTIVE',
        isFree: venuePartner.tariff === 'FREE',
        images: (() => {
          const images = [];
          if (venuePartner.coverImage) {
            images.push(venuePartner.coverImage);
          }
          if (venuePartner.additionalImages) {
            try {
              const additionalImages = JSON.parse(venuePartner.additionalImages);
              if (Array.isArray(additionalImages)) {
                images.push(...additionalImages);
              }
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ additionalImages:', error);
            }
          }
          return images.length > 0 ? JSON.stringify(images) : null;
        })(),
        updatedAt: new Date()
      }
    })

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω Listing ${updatedListing.id} –¥–ª—è VenuePartner ${venuePartner.id}`)
    return updatedListing

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Listing –∏–∑ VenuePartner:', error)
    throw error
  }
}

/**
 * –£–¥–∞–ª–∏—Ç—å Listing –Ω–∞ –æ—Å–Ω–æ–≤–µ VenuePartner
 */
export async function deleteListingFromVenuePartner(venuePartner: VenuePartnerData) {
  try {
    // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Listing –ø–æ slug
    const existingListing = await prisma.listing.findFirst({
      where: {
        slug: venuePartner.slug,
        vendorId: venuePartner.vendorId,
        cityId: venuePartner.cityId
      }
    })

    if (!existingListing) {
      console.log(`‚ö†Ô∏è Listing –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è VenuePartner ${venuePartner.id}`)
      return null
    }

    // –£–¥–∞–ª—è–µ–º Listing
    await prisma.listing.delete({
      where: { id: existingListing.id }
    })

    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω Listing ${existingListing.id} –¥–ª—è VenuePartner ${venuePartner.id}`)
    return true

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Listing –∏–∑ VenuePartner:', error)
    throw error
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å VenuePartner —Å Listing
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ VenuePartner
 */
export async function syncVenuePartnerWithListing(venuePartnerId: number) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ VenuePartner
    const venuePartner = await prisma.venuePartner.findUnique({
      where: { id: venuePartnerId },
      include: {
        subcategory: {
          include: {
            category: {
              select: {
                id: true,
                name: true
              }
            }
          }
        }
      }
    })

    if (!venuePartner) {
      throw new Error(`VenuePartner ${venuePartnerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    }

    console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è VenuePartner ${venuePartnerId} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${venuePartner.status}`)

    switch (venuePartner.status) {
      case 'ACTIVE':
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º Listing
        const existingListing = await prisma.listing.findFirst({
          where: {
            slug: venuePartner.slug,
            vendorId: venuePartner.vendorId,
            cityId: venuePartner.cityId
          }
        })

        if (existingListing) {
          await updateListingFromVenuePartner(venuePartner)
        } else {
          await createListingFromVenuePartner(venuePartner)
        }
        break

      case 'HIDDEN':
        // –£–¥–∞–ª—è–µ–º Listing
        await deleteListingFromVenuePartner(venuePartner)
        break

      case 'MODERATION':
        // –£–¥–∞–ª—è–µ–º Listing (–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
        await deleteListingFromVenuePartner(venuePartner)
        break

      default:
        console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å VenuePartner: ${venuePartner.status}`)
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ VenuePartner —Å Listing:', error)
    throw error
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ VenuePartner —Å Listing
 * –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export async function syncAllActiveVenuePartners() {
  try {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö VenuePartner...')

    const activeVenuePartners = await prisma.venuePartner.findMany({
      where: { status: 'ACTIVE' },
      include: {
        subcategory: {
          include: {
            category: {
              select: {
                id: true,
                name: true
              }
            }
          }
        }
      }
    })

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${activeVenuePartners.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö VenuePartner`)

    for (const venuePartner of activeVenuePartners) {
      try {
        await updateListingFromVenuePartner(venuePartner)
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ VenuePartner ${venuePartner.id}:`, error)
      }
    }

    console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö VenuePartner:', error)
    throw error
  }
}
