// src/middleware.ts - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// –†–∞—Å—à–∏—Ä—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
export const config = {
  matcher: [
    '/admin/:path*',
    '/vendor/:path*',
    '/profile/:path*',
    '/:city/events',
    '/:city/event/:slug*',
    '/city/:slug/cat/events',
    '/((?!api|_next/static|_next/image|favicon.ico).*)' // –ò—Å–∫–ª—é—á–∞–µ–º API routes
  ]
}

export async function middleware(req: NextRequest) {
  const { pathname, searchParams } = req.nextUrl
  
  console.log(`üîç MIDDLEWARE: ${req.method} ${pathname} - Started at ${new Date().toISOString()}`)
  
  // –ò—Å–∫–ª—é—á–∞–µ–º API routes
  if (pathname.startsWith('/api/')) {
    console.log(`üîç MIDDLEWARE: Skipping API route: ${pathname}`)
    return NextResponse.next()
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–π –¥–ª—è —Å—Ç–∞—Ä—ã—Ö slug'–æ–≤ –≥–æ—Ä–æ–¥–æ–≤
  if (pathname.startsWith('/city/moskva/')) {
    // Redirect: /city/moskva/... ‚Üí /city/moscow/... (301 —Ä–µ–¥–∏—Ä–µ–∫—Ç)
    const newPath = pathname.replace('/city/moskva/', '/city/moscow/')
    console.log(`üîÑ MIDDLEWARE: Redirecting old city slug: ${pathname} ‚Üí ${newPath}`)
    return NextResponse.redirect(new URL(newPath, req.url), 301)
  }
  
  if (pathname.startsWith('/moskva/')) {
    // Redirect: /moskva/... ‚Üí /moscow/... (301 —Ä–µ–¥–∏—Ä–µ–∫—Ç)
    const newPath = pathname.replace('/moskva/', '/moscow/')
    console.log(`üîÑ MIDDLEWARE: Redirecting old city slug: ${pathname} ‚Üí ${newPath}`)
    return NextResponse.redirect(new URL(newPath, req.url), 301)
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π - —Ç–æ–ª—å–∫–æ redirect –¥–ª—è —Å—Ç–∞—Ä—ã—Ö URL
  // –ù–æ–≤—ã–µ URL /[city]/events —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è Next.js –Ω–∞–ø—Ä—è–º—É—é
  
  if (pathname.match(/^\/city\/[^/]+\/cat\/events/)) {
    // Redirect: /city/moscow/cat/events ‚Üí /moscow/events (301 —Ä–µ–¥–∏—Ä–µ–∫—Ç)
    const city = pathname.split('/')[2]
    console.log(`üîÑ MIDDLEWARE: Redirecting /city/${city}/cat/events to /${city}/events`)
    return NextResponse.redirect(new URL(`/${city}/events`, req.url), 301)
  }
  
  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —ç—Ç–æ –∑–∞—â–∏—â–µ–Ω–Ω–∞—è –∑–æ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (pathname.startsWith('/admin') || pathname.startsWith('/vendor') || pathname.startsWith('/profile')) {
    // –î–ª—è –∞–¥–º–∏–Ω–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –∞–¥–º–∏–Ω–∞
    if (pathname.startsWith('/admin')) {
      const adminKey = searchParams.get('key')
      if (adminKey === 'kidsreview2025') {
        // –ö–ª—é—á –∞–¥–º–∏–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return NextResponse.next()
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏ –≤ cookies –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∑–æ–Ω
    const sessionCookie = req.cookies.get('session')
    console.log('üîç MIDDLEWARE: Session cookie check:', { 
      hasCookie: !!sessionCookie, 
      cookieValue: sessionCookie?.value?.substring(0, 20) + '...' 
    })
    
    if (!sessionCookie) {
      console.log('üîç MIDDLEWARE: No session cookie, redirecting to login')
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å –º–æ–¥–∞–ª–∫–æ–π –ª–æ–≥–∏–Ω–∞
      const url = new URL('/', req.url)
      url.searchParams.set('login', 'true')
      return NextResponse.redirect(url)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–∞ (–ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
    try {
      const { verifyJWT } = await import('@/lib/jwt')
      const payload = await verifyJWT(sessionCookie.value)
      
      if (!payload) {
        console.log('üîç MIDDLEWARE: Invalid JWT token, redirecting to login')
        const url = new URL('/', req.url)
        url.searchParams.set('login', 'true')
        return NextResponse.redirect(url)
      }
      
      console.log('üîç MIDDLEWARE: Valid JWT token, allowing access')
    } catch (error) {
      console.log('üîç MIDDLEWARE: JWT verification error, redirecting to login:', error)
      const url = new URL('/', req.url)
      url.searchParams.set('login', 'true')
      return NextResponse.redirect(url)
    }
    
    console.log('üîç MIDDLEWARE: Session cookie found, allowing access')
  }

  return NextResponse.next()
}