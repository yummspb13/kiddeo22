'use client'

import { useState, useEffect } from 'react'

interface Coordinates {
  lat: number | null
  lng: number | null
}

interface CoordinatesInputProps {
  coordinates: Coordinates
  onCoordinatesChange: (coordinates: Coordinates) => void
  className?: string
  disabled?: boolean
}

export default function CoordinatesInput({
  coordinates,
  onCoordinatesChange,
  className = "",
  disabled = false
}: CoordinatesInputProps) {
  const [coordinatesInput, setCoordinatesInput] = useState<string>('')

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—Ä–æ–ø—Å–∞–º–∏
  useEffect(() => {
    if (coordinates.lat && coordinates.lng) {
      setCoordinatesInput(`${coordinates.lat}, ${coordinates.lng}`)
    } else {
      setCoordinatesInput('')
    }
  }, [coordinates])

  const handleCoordinatesChange = (value: string) => {
    setCoordinatesInput(value)
    
    // –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "lat, lng"
    const parts = value.split(',').map(part => part.trim())
    
    if (parts.length === 2) {
      const lat = parseFloat(parts[0])
      const lng = parseFloat(parts[1])
      
      if (!isNaN(lat) && !isNaN(lng)) {
        onCoordinatesChange({ lat, lng })
      } else {
        onCoordinatesChange({ lat: null, lng: null })
      }
    } else if (value === '') {
      onCoordinatesChange({ lat: null, lng: null })
    }
  }

  const handleCurrentLocation = () => {
    if (!navigator.geolocation) {
      alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º')
      return
    }

    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords
        const coordsString = `${latitude}, ${longitude}`
        setCoordinatesInput(coordsString)
        onCoordinatesChange({
          lat: latitude,
          lng: longitude
        })
      },
      (error) => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error)
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
      }
    )
  }

  const handleClipboard = async () => {
    try {
      const text = await navigator.clipboard.readText()
      handleCoordinatesChange(text)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞:', error)
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞')
    }
  }

  return (
    <div className={`space-y-3 ${className}`}>
      <div className="flex items-center justify-between">
        <label className="block text-sm font-medium text-gray-700">
          –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞
        </label>
        <div className="flex space-x-2">
          <button
            type="button"
            onClick={handleCurrentLocation}
            disabled={disabled}
            className="text-xs text-blue-600 hover:text-blue-800 disabled:text-gray-400"
          >
            üìç –ú–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
          </button>
          <button
            type="button"
            onClick={handleClipboard}
            disabled={disabled}
            className="text-xs text-green-600 hover:text-green-800 disabled:text-gray-400"
          >
            üìã –ò–∑ –±—É—Ñ–µ—Ä–∞
          </button>
        </div>
      </div>
      
      <div>
        <input
          type="text"
          value={coordinatesInput}
          onChange={(e) => handleCoordinatesChange(e.target.value)}
          placeholder="59.887372, 30.268123"
          disabled={disabled}
          className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100"
        />
        <p className="text-xs text-gray-500 mt-1">
          –§–æ—Ä–º–∞—Ç: —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 59.887372, 30.268123)
        </p>
      </div>
      
      {coordinates.lat && coordinates.lng && (
        <div className="text-xs text-gray-500">
          <div className="flex items-center space-x-2">
            <span>üìç</span>
            <span>
              {coordinates.lat.toFixed(6)}, {coordinates.lng.toFixed(6)}
            </span>
            <a
              href={`https://yandex.ru/maps/?pt=${coordinates.lng},${coordinates.lat}&z=16&l=map`}
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-600 hover:text-blue-800"
            >
              –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ
            </a>
          </div>
        </div>
      )}
    </div>
  )
}
