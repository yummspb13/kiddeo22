'use client'

import { useState, useEffect } from 'react'
import { Plus, Edit, Trash2, Eye, EyeOff, MapPin, Building, Wrench } from 'lucide-react'
import { VenueSubcategory, VenueType } from '@prisma/client'
import { safeArray } from '@/lib/api-utils'

interface VenueSubcategoryWithDetails extends VenueSubcategory {
  category: {
    id: number
    name: string
  }
  citySubcategories: {
    city: {
      id: number
      name: string
    }
  }[]
  _count: {
    filters: number
    partners: number
  }
}

export function VenueSubcategoriesClient() {
  const [subcategories, setSubcategories] = useState<VenueSubcategoryWithDetails[]>([])
  const [loading, setLoading] = useState(true)
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [editingSubcategory, setEditingSubcategory] = useState<VenueSubcategoryWithDetails | null>(null)
  const [uploadingIcon, setUploadingIcon] = useState(false)

  useEffect(() => {
    fetchSubcategories()
  }, [])

  const fetchSubcategories = async () => {
    try {
      const response = await fetch('/api/admin/venues/subcategories?key=kidsreview2025')
      if (response.ok) {
        const data = await response.json()
        setSubcategories(data)
      } else {
        console.error('Error fetching subcategories:', response.status)
      }
    } catch (error) {
      console.error('Error fetching subcategories:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleCreate = () => {
    setEditingSubcategory(null)
    setShowCreateModal(true)
  }

  const handleEdit = (subcategory: VenueSubcategoryWithDetails) => {
    setEditingSubcategory(subcategory)
    setShowCreateModal(true)
  }

  const handleDelete = async (id: number) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é?')) return

    try {
      const response = await fetch(`/api/admin/venues/subcategories/${id}?key=kidsreview2025`, {
        method: 'DELETE',
      })
      
      if (response.ok) {
        await fetchSubcategories()
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
      }
    } catch (error) {
      console.error('Error deleting subcategory:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    }
  }

  const handleToggleActive = async (id: number, isActive: boolean) => {
    try {
      const response = await fetch(`/api/admin/venues/subcategories/${id}?key=kidsreview2025`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ isActive: !isActive }),
      })
      
      if (response.ok) {
        await fetchSubcategories()
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
      }
    } catch (error) {
      console.error('Error toggling subcategory status:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    }
  }

  const handleIconUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setUploadingIcon(true);
    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('type', 'icon');

      const response = await fetch(`/api/admin/upload?key=kidsreview2025`, {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();
        setFormData(prev => ({ ...prev, icon: data.url }));
        console.log('üîç SUBCATEGORY MODAL: Icon uploaded successfully:', data.url);
      } else {
        console.error('üîç SUBCATEGORY MODAL: Icon upload failed:', response.status);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∫–æ–Ω–∫–∏');
      }
    } catch (error) {
      console.error('üîç SUBCATEGORY MODAL: Error uploading icon:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∫–æ–Ω–∫–∏');
    } finally {
      setUploadingIcon(false);
    }
  };

  const getTypeIcon = (type: VenueType) => {
    return type === 'PLACE' ? <Building className="w-4 h-4" /> : <Wrench className="w-4 h-4" />
  }

  const getTypeLabel = (type: VenueType) => {
    return type === 'PLACE' ? '–ú–µ—Å—Ç–æ' : '–£—Å–ª—É–≥–∞'
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
      <div className="flex justify-end">
        <button
          onClick={handleCreate}
          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          <Plus className="w-4 h-4 mr-2" />
          –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
        </button>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      <div className="bg-white shadow overflow-hidden sm:rounded-md">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –ù–∞–∑–≤–∞–Ω–∏–µ
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –¢–∏–ø
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –ò–∫–æ–Ω–∫–∞
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –¶–≤–µ—Ç
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –ê–∫—Ç–∏–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –§–∏–ª—å—Ç—Ä—ã
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –ü–∞—Ä—Ç–Ω–µ—Ä—ã
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –°—Ç–∞—Ç—É—Å
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –î–µ–π—Å—Ç–≤–∏—è
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {subcategories.map((subcategory) => (
                <tr key={subcategory.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">{subcategory.name}</div>
                    <div className="text-sm text-gray-500">{subcategory.slug}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">{subcategory.category.name}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center text-sm text-gray-900">
                      {getTypeIcon(subcategory.type)}
                      <span className="ml-1">{getTypeLabel(subcategory.type)}</span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {subcategory.icon ? (
                      <div className="flex items-center">
                        {subcategory.icon.startsWith('http') || subcategory.icon.startsWith('/') ? (
                          <img
                            src={subcategory.icon}
                            alt={subcategory.name}
                            className="w-8 h-8 object-contain rounded-full"
                            onError={(e) => {
                              e.currentTarget.style.display = 'none';
                              e.currentTarget.nextElementSibling?.classList.remove('hidden');
                            }}
                          />
                        ) : null}
                        <div 
                          className={`w-8 h-8 rounded-full flex items-center justify-center ${subcategory.icon.startsWith('http') || subcategory.icon.startsWith('/') ? 'hidden' : ''}`}
                          style={{ backgroundColor: subcategory.color || '#6B7280' }}
                        >
                          <span className="text-white text-sm">{subcategory.icon}</span>
                        </div>
                      </div>
                    ) : (
                      <span className="text-gray-400">‚Äî</span>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {subcategory.color ? (
                      <div className="flex items-center">
                        <div 
                          className="w-4 h-4 rounded-full mr-2"
                          style={{ backgroundColor: subcategory.color }}
                        ></div>
                        <span className="text-sm text-gray-900">{subcategory.color}</span>
                      </div>
                    ) : (
                      <span className="text-gray-400">‚Äî</span>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <MapPin className="w-4 h-4 text-gray-400 mr-1" />
                      <span className="text-sm text-gray-900">
                        {subcategory.citySubcategories.length} –≥–æ—Ä–æ–¥–æ–≤
                      </span>
                    </div>
                    <div className="text-xs text-gray-500">
                      {subcategory.citySubcategories.slice(0, 3).map(cs => cs.city.name).join(', ')}
                      {subcategory.citySubcategories.length > 3 && '...'}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="text-sm text-gray-900">{subcategory._count.filters}</span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="text-sm text-gray-900">{subcategory._count.partners}</span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <button
                      onClick={() => handleToggleActive(subcategory.id, subcategory.isActive)}
                      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        subcategory.isActive
                          ? 'bg-green-100 text-green-800'
                          : 'bg-gray-100 text-gray-800'
                      }`}
                    >
                      {subcategory.isActive ? (
                        <>
                          <Eye className="w-3 h-3 mr-1" />
                          –ê–∫—Ç–∏–≤–Ω–æ
                        </>
                      ) : (
                        <>
                          <EyeOff className="w-3 h-3 mr-1" />
                          –°–∫—Ä—ã—Ç–æ
                        </>
                      )}
                    </button>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => handleEdit(subcategory)}
                        className="text-blue-600 hover:text-blue-900"
                      >
                        <Edit className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => handleDelete(subcategory.id)}
                        className="text-red-600 hover:text-red-900"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {showCreateModal && (
        <SubcategoryModal
          subcategory={editingSubcategory}
          onClose={() => {
            setShowCreateModal(false)
            setEditingSubcategory(null)
          }}
          onSave={fetchSubcategories}
        />
      )}
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function SubcategoryModal({ 
  subcategory, 
  onClose, 
  onSave 
}: { 
  subcategory: VenueSubcategoryWithDetails | null
  onClose: () => void
  onSave: () => void
}) {
  const [formData, setFormData] = useState(() => ({
    name: subcategory?.name ?? '',
    slug: subcategory?.slug ?? '',
    type: subcategory?.type ?? 'PLACE' as VenueType,
    categoryId: subcategory?.categoryId ?? 0,
    icon: subcategory?.icon ?? '',
    color: subcategory?.color ?? '#3B82F6',
    backgroundImage: subcategory?.backgroundImage ?? '',
    cityIds: subcategory?.citySubcategories?.map(cs => cs.city.id) ?? [],
    isActive: subcategory?.isActive ?? true
  }))
  const [categories, setCategories] = useState<{ id: number; name: string }[]>([])
  const [cities, setCities] = useState<{ id: number; name: string }[]>([])
  const [loading, setLoading] = useState(false)
  const [uploadingBackground, setUploadingBackground] = useState(false)
  const [uploadingIcon, setUploadingIcon] = useState(false)

  useEffect(() => {
    fetchCategories()
    fetchCities()
  }, [])

  // –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
  const russianToEnglish = {
    '–∑–æ–æ–ø–∞—Ä–∫–∏': 'zoo',
    '–∑–æ–æ–ø–∞—Ä–∫': 'zoo',
    '–ø–∞—Ä–∫–∏': 'parks',
    '–ø–∞—Ä–∫': 'park',
    '–º—É–∑–µ–∏': 'museums',
    '–º—É–∑–µ–π': 'museum',
    '—Ç–µ–∞—Ç—Ä—ã': 'theaters',
    '—Ç–µ–∞—Ç—Ä': 'theater',
    '–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã': 'cinemas',
    '–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä': 'cinema',
    '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã': 'restaurants',
    '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'restaurant',
    '–∫–∞—Ñ–µ': 'cafes',
    '–∫–∞—Ñ–µ': 'cafe',
    '—Å–ø–æ—Ä—Ç': 'sport',
    '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ': 'sports',
    '–±–∞—Å—Å–µ–π–Ω—ã': 'pools',
    '–±–∞—Å—Å–µ–π–Ω': 'pool',
    '—Ñ–∏—Ç–Ω–µ—Å': 'fitness',
    '–π–æ–≥–∞': 'yoga',
    '—Ç–∞–Ω—Ü—ã': 'dancing',
    '—Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã–µ': 'dance',
    '–º—É–∑—ã–∫–∞': 'music',
    '–º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ': 'musical',
    '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'education',
    '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ': 'educational',
    '—à–∫–æ–ª—ã': 'schools',
    '—à–∫–æ–ª–∞': 'school',
    '–¥–µ—Ç—Å–∫–∏–µ': 'children',
    '–¥–µ—Ç—Å–∫–∏–π': 'children',
    '—Å–∞–¥—ã': 'gardens',
    '—Å–∞–¥': 'garden',
    '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'entertainment',
    '—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ': 'entertainment',
    '–∏–≥—Ä—ã': 'games',
    '–∏–≥—Ä–∞': 'game',
    '–∫–≤–µ—Å—Ç—ã': 'quests',
    '–∫–≤–µ—Å—Ç': 'quest',
    'vr': 'vr',
    '–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è': 'virtual',
    '—Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å': 'reality',
    '–±–æ—É–ª–∏–Ω–≥': 'bowling',
    '–∫–∞—Ä–∞–æ–∫–µ': 'karaoke',
    '–±–∏–ª—å—è—Ä–¥': 'billiards',
    '–Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ': 'board',
    '–∫—Ä–∞—Å–æ—Ç–∞': 'beauty',
    '–∑–¥–æ—Ä–æ–≤—å–µ': 'health',
    '—Å–ø–∞': 'spa',
    '–º–∞—Å—Å–∞–∂': 'massage',
    '–º–∞–Ω–∏–∫—é—Ä': 'manicure',
    '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è': 'hairdresser',
    '–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è': 'cosmetology',
    '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è': 'dentistry',
    '–º–µ–¥–∏—Ü–∏–Ω–∞': 'medicine',
    '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ': 'medical',
    '–ª–æ–≥–æ–ø–µ–¥': 'speech-therapist',
    '–ø—Å–∏—Ö–æ–ª–æ–≥': 'psychologist',
    '–ª–∞–≥–µ—Ä—è': 'camps',
    '–ª–∞–≥–µ—Ä—å': 'camp',
    '–ª–µ—Ç–Ω–∏–µ': 'summer',
    '–∑–∏–º–Ω–∏–µ': 'winter',
    '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ': 'sports',
    '—Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ': 'creative',
    '–æ–±—É—á–∞—é—â–∏–µ': 'educational'
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
  const generateSlug = (text: string) => {
    let result = text.toLowerCase()
    
    // –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
    Object.entries(russianToEnglish).forEach(([russian, english]) => {
      const regex = new RegExp(russian, 'gi')
      result = result.replace(regex, english)
    })
    
    // –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º slug
    return result
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim()
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
  useEffect(() => {
    if (formData.name && !formData.slug) {
      const slug = generateSlug(formData.name)
      setFormData(prev => ({ ...prev, slug }))
    }
  }, [formData.name])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ slug
  const generateUniqueSlug = async (baseSlug: string) => {
    let uniqueSlug = baseSlug
    let counter = 1
    
    while (true) {
      try {
        const response = await fetch(`/api/admin/venues/subcategories/check-slug?slug=${uniqueSlug}`)
        if (response.ok) {
          const data = await response.json()
          if (!data.exists) {
            return uniqueSlug
          }
        }
        uniqueSlug = `${baseSlug}-${counter}`
        counter++
      } catch (error) {
        console.error('Error checking slug uniqueness:', error)
        return uniqueSlug
      }
    }
  }

  const fetchCategories = async () => {
    try {
      const response = await fetch('/api/admin/venues/categories')
      if (response.ok) {
        const data = await response.json()
        setCategories(data)
      }
    } catch (error) {
      console.error('Error fetching categories:', error)
    }
  }

  const fetchCities = async () => {
    try {
      console.log('üîç SUBCATEGORY MODAL: Fetching cities...')
      const response = await fetch('/api/admin/cities')
      if (response.ok) {
        const data = await response.json()
        console.log('üîç SUBCATEGORY MODAL: Cities API response:', data)
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { cities: [...] }, –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –º–∞—Å—Å–∏–≤
        const citiesArray = data.cities || []
        console.log('üîç SUBCATEGORY MODAL: Cities array:', citiesArray)
        setCities(safeArray(citiesArray))
      } else {
        console.error('üîç SUBCATEGORY MODAL: Cities API error:', response.status)
      }
    } catch (error) {
      console.error('üîç SUBCATEGORY MODAL: Error fetching cities:', error)
    }
  }

  const handleIconUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setUploadingIcon(true);
    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('type', 'icon');

      const response = await fetch(`/api/admin/upload?key=kidsreview2025`, {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();
        setFormData(prev => ({ ...prev, icon: data.url }));
        console.log('üîç SUBCATEGORY MODAL: Icon uploaded successfully:', data.url);
      } else {
        console.error('üîç SUBCATEGORY MODAL: Icon upload failed:', response.status);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∫–æ–Ω–∫–∏');
      }
    } catch (error) {
      console.error('üîç SUBCATEGORY MODAL: Error uploading icon:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∫–æ–Ω–∫–∏');
    } finally {
      setUploadingIcon(false);
    }
  };

  const handleBackgroundUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setUploadingBackground(true);
    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('type', 'background');

      const response = await fetch(`/api/admin/upload?key=kidsreview2025`, {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();
        setFormData(prev => ({ ...prev, backgroundImage: data.url }));
        console.log('üîç SUBCATEGORY MODAL: Background uploaded successfully:', data.url);
      } else {
        console.error('üîç SUBCATEGORY MODAL: Background upload failed:', response.status);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('üîç SUBCATEGORY MODAL: Error uploading background:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    } finally {
      setUploadingBackground(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)

    try {
      const url = subcategory 
        ? `/api/admin/venues/subcategories/${subcategory.id}?key=kidsreview2025`
        : '/api/admin/venues/subcategories?key=kidsreview2025'
      
      const method = subcategory ? 'PATCH' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })

      if (response.ok) {
        onSave()
        onClose()
      } else {
        const error = await response.json()
        if (response.status === 409) {
          alert(`–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${error.existingSubcategory?.name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`)
        } else {
          alert(error.error || error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        }
      }
    } catch (error) {
      console.error('Error saving subcategory:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
      <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div className="mt-3">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            {subcategory ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é' : '–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é'}
          </h3>
          
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                –ù–∞–∑–≤–∞–Ω–∏–µ
              </label>
              <input
                type="text"
                value={formData.name ?? ''}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Slug (URL)
              </label>
              <div className="mt-1 flex items-center space-x-2">
                <input
                  type="text"
                  value={formData.slug ?? ''}
                  onChange={(e) => setFormData({ ...formData, slug: e.target.value })}
                  placeholder="auto-generated-slug"
                  className="flex-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
                <button
                  type="button"
                  onClick={async () => {
                    const baseSlug = generateSlug(formData.name)
                    const uniqueSlug = await generateUniqueSlug(baseSlug)
                    setFormData(prev => ({ ...prev, slug: uniqueSlug }))
                  }}
                  className="px-3 py-2 text-sm font-medium text-gray-700 bg-gray-100 border border-gray-300 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  –ê–≤—Ç–æ
                </button>
              </div>
              <div className="text-xs text-gray-500 mt-1">
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
              </div>
              {formData.name && (
                <div className="text-xs text-blue-600 mt-1">
                  –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: {generateSlug(formData.name)}
                </div>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                –¢–∏–ø
              </label>
              <select
                value={formData.type ?? 'PLACE'}
                onChange={(e) => setFormData({ ...formData, type: e.target.value as VenueType })}
                className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              >
                <option value="PLACE">–ú–µ—Å—Ç–æ</option>
                <option value="SERVICE">–£—Å–ª—É–≥–∞</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                –ö–∞—Ç–µ–≥–æ—Ä–∏—è
              </label>
              <select
                value={formData.categoryId ?? 0}
                onChange={(e) => setFormData({ ...formData, categoryId: parseInt(e.target.value) })}
                className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                required
              >
                <option value={0}>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                {categories.map((category) => (
                  <option key={category.id} value={category.id}>
                    {category.name}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                –ò–∫–æ–Ω–∫–∞
              </label>
              <div className="mt-1 flex items-center space-x-4">
                <input
                  type="text"
                  value={formData.icon ?? ''}
                  onChange={(e) => {
                    console.log('Icon input changed:', e.target.value)
                    setFormData(prev => ({ ...prev, icon: e.target.value }))
                  }}
                  placeholder="üé® –∏–ª–∏ URL –∏–∫–æ–Ω–∫–∏"
                  className="flex-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                />
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleIconUpload}
                  className="hidden"
                  id="icon-upload"
                />
                <label
                  htmlFor="icon-upload"
                  className={`px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer ${
                    uploadingIcon ? 'opacity-50 cursor-not-allowed' : ''
                  }`}
                >
                  {uploadingIcon ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å'}
                </label>
              </div>
              {formData.icon && (
                <div className="mt-2 flex items-center space-x-2">
                  <span className="text-sm text-gray-500">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</span>
                  {formData.icon.startsWith('http') || formData.icon.startsWith('/') ? (
                    <img
                      src={formData.icon}
                      alt="Icon preview"
                      className="w-8 h-8 object-contain"
                      onError={(e) => {
                        e.currentTarget.style.display = 'none';
                      }}
                    />
                  ) : (
                    <span className="text-2xl">{formData.icon}</span>
                  )}
                </div>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                –¶–≤–µ—Ç
              </label>
              <div className="flex items-center space-x-2">
                <input
                  type="color"
                  value={formData.color ?? '#3B82F6'}
                  onChange={(e) => setFormData({ ...formData, color: e.target.value })}
                  className="w-12 h-8 border border-gray-300 rounded"
                />
                <input
                  type="text"
                  value={formData.color ?? '#3B82F6'}
                  onChange={(e) => setFormData({ ...formData, color: e.target.value })}
                  className="flex-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
              </label>
              <div className="mt-1 flex items-center space-x-4">
                <input
                  type="text"
                  value={formData.backgroundImage ?? ''}
                  onChange={(e) => setFormData({ ...formData, backgroundImage: e.target.value })}
                  placeholder="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                  className="flex-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                />
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleBackgroundUpload}
                  className="hidden"
                  id="background-upload"
                />
                <label
                  htmlFor="background-upload"
                  className={`px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer ${
                    uploadingBackground ? 'opacity-50 cursor-not-allowed' : ''
                  }`}
                >
                  {uploadingBackground ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å'}
                </label>
              </div>
              {formData.backgroundImage && (
                <div className="mt-2">
                  <span className="text-sm text-gray-500">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</span>
                  <img
                    src={formData.backgroundImage}
                    alt="Background preview"
                    className="mt-1 w-32 h-20 object-cover rounded border"
                    onError={(e) => {
                      e.currentTarget.style.display = 'none';
                    }}
                  />
                </div>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                –ê–∫—Ç–∏–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
              </label>
              <div className="mt-2 space-y-2 max-h-32 overflow-y-auto">
                {Array.isArray(cities) ? cities.map((city) => (
                  <label key={city.id} className="flex items-center">
                    <input
                      type="checkbox"
                      checked={formData.cityIds.includes(city.id)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setFormData({
                            ...formData,
                            cityIds: [...formData.cityIds, city.id]
                          })
                        } else {
                          setFormData({
                            ...formData,
                            cityIds: formData.cityIds.filter(id => id !== city.id)
                          })
                        }
                      }}
                      className="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
                    />
                    <span className="ml-2 text-sm text-gray-700">{city.name}</span>
                  </label>
                )) : (
                  <div className="text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤...</div>
                )}
              </div>
            </div>

            <div>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={formData.isActive ?? true}
                  onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}
                  className="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
                />
                <span className="ml-2 text-sm text-gray-700">–ê–∫—Ç–∏–≤–Ω–æ</span>
              </label>
            </div>

            <div className="flex justify-end space-x-3 pt-4">
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="submit"
                disabled={loading}
                className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
              >
                {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (subcategory ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å')}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}

