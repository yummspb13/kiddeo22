import { NextRequest, NextResponse } from 'next/server'
import { cleanupInactiveVendors, updateVendorWarnings } from '@/lib/cron-jobs'

// POST /api/cron/cleanup-vendors - –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –≤–µ–Ω–¥–æ—Ä–æ–≤ (–¥–ª—è cron)
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç cron —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
    const authHeader = request.headers.get('authorization')
    const cronSecret = process.env.CRON_SECRET || 'default-cron-secret'
    
    if (authHeader !== `Bearer ${cronSecret}`) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    console.log('üïê –ó–∞–ø—É—Å–∫ cron job: –æ—á–∏—Å—Ç–∫–∞ –≤–µ–Ω–¥–æ—Ä–æ–≤')
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    const warningResult = await updateVendorWarnings()
    console.log('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:', warningResult)
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
    const cleanupResult = await cleanupInactiveVendors()
    console.log('üßπ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏:', cleanupResult)

    return NextResponse.json({
      success: true,
      timestamp: new Date().toISOString(),
      warningResult,
      cleanupResult
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ cron job –æ—á–∏—Å—Ç–∫–∏ –≤–µ–Ω–¥–æ—Ä–æ–≤:', error)
    return NextResponse.json({ 
      error: 'Cron job failed',
      message: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    }, { status: 500 })
  }
}

// GET /api/cron/cleanup-vendors - —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
export async function GET(request: NextRequest) {
  try {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–æ
    if (process.env.NODE_ENV === 'production') {
      return NextResponse.json({ error: 'Not available in production' }, { status: 403 })
    }

    console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –≤–µ–Ω–¥–æ—Ä–æ–≤')
    
    const warningResult = await updateVendorWarnings()
    const cleanupResult = await cleanupInactiveVendors()

    return NextResponse.json({
      success: true,
      timestamp: new Date().toISOString(),
      warningResult,
      cleanupResult
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ:', error)
    return NextResponse.json({ 
      error: 'Test run failed',
      message: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

