import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { addPoints, POINTS_CATEGORIES, POINTS_VALUES } from '@/lib/points'

export const runtime = 'nodejs'

// POST - –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
export async function POST(request: NextRequest) {
  try {
    const userId = request.headers.get('x-user-id')
    
    if (!userId) {
      return NextResponse.json({ error: 'User ID required' }, { status: 400 })
    }

    console.log('üîç POST /api/referral/generate - UserId:', userId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
    const existingInvite = await prisma.userInvite.findFirst({
      where: {
        inviterId: parseInt(userId),
        isUsed: false
      }
    })

    if (existingInvite) {
      return NextResponse.json({
        success: true,
        inviteCode: existingInvite.inviteCode,
        message: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞'
      })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const inviteCode = `REF-${Date.now()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}`

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
    const invite = await prisma.userInvite.create({
      data: {
        inviterId: parseInt(userId),
        inviteCode: inviteCode,
        email: null
      }
    })

    console.log('‚úÖ Referral code generated:', inviteCode)

    return NextResponse.json({
      success: true,
      inviteCode: inviteCode,
      message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞'
    })
  } catch (error) {
    console.error('Error generating referral code:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// GET - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request: NextRequest) {
  try {
    const userId = request.headers.get('x-user-id')
    
    if (!userId) {
      return NextResponse.json({ error: 'User ID required' }, { status: 400 })
    }

    console.log('üîç GET /api/referral/generate - UserId:', userId)

    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    const invite = await prisma.userInvite.findFirst({
      where: {
        inviterId: parseInt(userId),
        isUsed: false
      },
      orderBy: {
        createdAt: 'desc'
      }
    })

    if (!invite) {
      return NextResponse.json({
        success: true,
        inviteCode: null,
        message: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏'
      })
    }

    return NextResponse.json({
      success: true,
      inviteCode: invite.inviteCode,
      message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞'
    })
  } catch (error) {
    console.error('Error getting referral code:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
