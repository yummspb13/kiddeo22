import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { addPoints, POINTS_CATEGORIES, POINTS_VALUES } from '@/lib/points'

export const runtime = 'nodejs'

// POST - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
export async function POST(request: NextRequest) {
  try {
    const { inviteCode, userId } = await request.json()
    
    if (!inviteCode || !userId) {
      return NextResponse.json({ error: 'Invite code and user ID required' }, { status: 400 })
    }

    console.log('üîç POST /api/referral/use - InviteCode:', inviteCode, 'UserId:', userId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const invite = await prisma.userInvite.findFirst({
      where: {
        inviteCode: inviteCode,
        isUsed: false
      }
    })

    if (!invite) {
      return NextResponse.json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞' 
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Å–∞–º —Å–µ–±—è
    if (invite.inviterId === parseInt(userId)) {
      return NextResponse.json({ 
        error: '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É' 
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫—É—é-–ª–∏–±–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    const existingInvite = await prisma.userInvite.findFirst({
      where: {
        inviteeId: parseInt(userId)
      }
    })

    if (existingInvite) {
      return NextResponse.json({ 
        error: '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É' 
      }, { status: 400 })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
    await prisma.userInvite.update({
      where: { id: invite.id },
      data: {
        inviteeId: parseInt(userId),
        isUsed: true,
        usedAt: new Date()
      }
    })

    // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–º—É
    try {
      const pointsResult = await addPoints({
        userId: invite.inviterId,
        points: POINTS_VALUES.INVITE_FRIEND,
        category: POINTS_CATEGORIES.INVITE_FRIEND,
        description: `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ`
      })
      
      if (pointsResult.success) {
        console.log('‚úÖ Points awarded for referral:', POINTS_VALUES.INVITE_FRIEND)
      } else {
        console.error('‚ùå Error awarding referral points:', pointsResult.error)
      }
    } catch (pointsError) {
      console.error('Error awarding referral points:', pointsError)
    }

    console.log('‚úÖ Referral code used successfully')

    return NextResponse.json({
      success: true,
      message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å—ã.'
    })
  } catch (error) {
    console.error('Error using referral code:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
