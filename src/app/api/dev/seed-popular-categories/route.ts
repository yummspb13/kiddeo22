import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/db';
export const runtime = 'nodejs'

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const adminKey = searchParams.get('key');

    if (adminKey !== 'kidsreview2025') {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞
    const cities = await prisma.city.findMany({
      select: { id: true, name: true, slug: true }
    });

    if (cities.length === 0) {
      return NextResponse.json(
        { error: 'No cities found. Please seed cities first.' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    const popularCategories = [
      {
        name: '–¢–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è',
        description: '–°–ø–µ–∫—Ç–∞–∫–ª–∏, –º—é–∑–∏–∫–ª—ã, –¥–µ—Ç—Å–∫–∏–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏',
        icon: 'üé≠',
        color: '#8B5CF6',
        sortOrder: 1
      },
      {
        name: '–°–æ–±—ã—Ç–∏—è –Ω–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞',
        description: '–ú–µ—Å—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        icon: 'üèõÔ∏è',
        color: '#3B82F6',
        sortOrder: 2
      },
      {
        name: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        description: '–°–ø–æ—Ä—Ç, —Ñ–∏—Ç–Ω–µ—Å, –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö',
        icon: '‚öΩ',
        color: '#10B981',
        sortOrder: 3
      },
      {
        name: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è',
        description: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –ª–µ–∫—Ü–∏–∏, –∫—É—Ä—Å—ã',
        icon: 'üìö',
        color: '#F59E0B',
        sortOrder: 4
      },
      {
        name: '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã',
        description: '–ò–≥—Ä–æ–≤—ã–µ –∑–æ–Ω—ã, –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        icon: 'üé™',
        color: '#EF4444',
        sortOrder: 5
      }
    ];

    const createdCategories = [];

    for (const city of cities) {
      for (const category of popularCategories) {
        try {
          const created = await prisma.popularCategory.create({
            data: {
              ...category,
              cityId: city.id
            }
          });
          createdCategories.push(created);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
          console.log(`Category ${category.name} already exists for city ${city.name}`);
        }
      }
    }

    return NextResponse.json({
      success: true,
      message: `Created ${createdCategories.length} popular categories`,
      categories: createdCategories
    });
  } catch (error) {
    console.error('Error seeding popular categories:', error);
    return NextResponse.json(
      { error: 'Failed to seed popular categories', details: error },
      { status: 500 }
    );
  }
}
