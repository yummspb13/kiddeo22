import { NextRequest, NextResponse } from 'next/server';
import { getSessionFromToken, deleteSession, clearAuthCookies } from '@/lib/auth-session';
import { prisma } from '@/lib/db';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';
export const revalidate = 0;

export async function POST(request: NextRequest) {
  try {
    const accessToken = request.cookies.get('session')?.value;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î
    let userId: number | null = null;
    if (accessToken) {
      const sessionData = await getSessionFromToken(accessToken);
      if (sessionData.sessionId) {
        userId = sessionData.userId;
        await deleteSession(sessionData.sessionId);
      }
    }

    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    if (userId) {
      try {
        await prisma.cart.deleteMany({
          where: {
            userId: userId
          }
        });
        console.log(`üßπ Logout: Cleared cart for user ${userId}`);
      } catch (error) {
        console.error('Error clearing cart on logout:', error);
      }
    }

    const response = NextResponse.json({ 
      success: true, 
      message: 'Logged out successfully' 
    });

    // –û—á–∏—â–∞–µ–º –≤—Å–µ cookies –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    clearAuthCookies(response);

    response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
    response.headers.set('Pragma', 'no-cache');
    response.headers.set('Expires', '0');

    return response;
  } catch (error) {
    console.error('Logout error:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Internal server error' 
    }, { status: 500 });
  }
}
