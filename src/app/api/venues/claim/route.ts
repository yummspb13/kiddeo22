import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'

export const runtime = 'nodejs'

export async function POST(request: NextRequest) {
  try {
    const { venueId, claimType } = await request.json()

    if (!venueId || !claimType) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Å—Ç–æ
    const venue = await prisma.venuePartner.findUnique({
      where: { id: venueId },
      select: { id: true, name: true, vendorId: true }
    })

    if (!venue) {
      return NextResponse.json(
        { error: 'Venue not found' },
        { status: 404 }
      )
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∫–ª–µ–π–º
    const claim = await prisma.venueClaim.create({
      data: {
        venueId,
        claimType,
        status: 'PENDING',
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å userId –∏–∑ —Å–µ—Å—Å–∏–∏
        claimedBy: 'anonymous', // –í—Ä–µ–º–µ–Ω–Ω–æ
        claimData: {
          venueName: venue.name,
          claimedAt: new Date().toISOString()
        }
      }
    })

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É)
    console.log(`üè¢ New venue claim: ${venue.name} (ID: ${venueId})`)

    return NextResponse.json({
      success: true,
      claimId: claim.id,
      message: 'Claim submitted successfully'
    })

  } catch (error) {
    console.error('Venue claim error:', error)
    return NextResponse.json(
      { error: 'Failed to submit claim' },
      { status: 500 }
    )
  }
}
