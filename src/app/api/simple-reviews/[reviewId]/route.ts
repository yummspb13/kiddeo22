import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { deductPoints, POINTS_VALUES, POINTS_CATEGORIES } from '@/lib/points'
export const runtime = 'nodejs'

// PUT - –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∑—ã–≤
export async function PUT(
  request: NextRequest,
  { params }: { params: { reviewId: string } }
) {
  try {
    const { reviewId } = params
    const { rating, comment, photos } = await request.json()
    
    console.log('üîç PUT /api/simple-reviews/[reviewId] - ReviewId:', reviewId, 'Rating:', rating)

    if (!rating || rating < 1 || rating > 5) {
      return NextResponse.json({ 
        success: false,
        error: '–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5' 
      }, { status: 400 })
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–∑—ã–≤–∞ (—Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –º–µ—Å—Ç–æ)
    const eventReview = await prisma.eventReview.findUnique({ where: { id: reviewId } })
    const venueReview = await prisma.venueReview.findUnique({ where: { id: reviewId } })
    
    if (!eventReview && !venueReview) {
      return NextResponse.json({ 
        success: false,
        error: '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 404 })
    }

    const isVenue = !!venueReview
    const reviewModel = isVenue ? 'venueReview' : 'eventReview'

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
    const updatedReview = await prisma[reviewModel].update({
      where: {
        id: reviewId
      },
      data: {
        rating: parseInt(rating),
        comment: comment || null,
        photos: photos || null,
        updatedAt: new Date()
      },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            image: true
          }
        }
      }
    })

    console.log('‚úÖ Review updated:', reviewId, 'type:', isVenue ? 'venue' : 'event')
    return NextResponse.json({ 
      success: true, 
      review: updatedReview 
    })
  } catch (error) {
    console.error('‚ùå Error updating review:', error)
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 })
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { reviewId: string } }
) {
  try {
    const { reviewId } = params
    console.log('üîç DELETE /api/simple-reviews/[reviewId] - ReviewId:', reviewId)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–∑—ã–≤–∞ (—Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –º–µ—Å—Ç–æ)
    const eventReview = await prisma.eventReview.findUnique({ where: { id: reviewId } })
    const venueReview = await prisma.venueReview.findUnique({ where: { id: reviewId } })
    
    if (!eventReview && !venueReview) {
      return NextResponse.json({ 
        success: false,
        error: '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 404 })
    }

    const isVenue = !!venueReview
    const reviewModel = isVenue ? 'venueReview' : 'eventReview'
    const review = isVenue ? venueReview : eventReview

    // –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–ª—ã –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    try {
      const pointsToDeduct = isVenue ? POINTS_VALUES.RATE_VENUE : POINTS_VALUES.WRITE_REVIEW
      const category = isVenue ? POINTS_CATEGORIES.RATE_VENUE : POINTS_CATEGORIES.WRITE_REVIEW
      
      const deductResult = await deductPoints({
        userId: review.userId,
        points: pointsToDeduct,
        category,
        description: `–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –Ω–∞ ${isVenue ? '–º–µ—Å—Ç–æ' : '—Å–æ–±—ã—Ç–∏–µ'}`,
        eventId: isVenue ? review.venueId?.toString() : review.eventId
      })
      
      if (deductResult.success) {
        console.log('‚úÖ Points deducted for review deletion:', pointsToDeduct)
      } else {
        console.error('‚ùå Error deducting points:', deductResult.error)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å –±–∞–ª–ª–∞–º–∏
      }
    } catch (pointsError) {
      console.error('Error deducting points for review deletion:', pointsError)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å –±–∞–ª–ª–∞–º–∏
    }

    // –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤ (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç—ã)
    await prisma[reviewModel].delete({
      where: {
        id: reviewId
      }
    })

    console.log('‚úÖ Review deleted:', reviewId, 'type:', isVenue ? 'venue' : 'event')
    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('‚ùå Error deleting review:', error)
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 })
  }
}
