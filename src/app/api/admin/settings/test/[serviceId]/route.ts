// src/app/api/admin/settings/test/[serviceId]/route.ts - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from '@/lib/auth-utils'
import { prisma } from '@/lib/prisma'
import { uploadToCloudinary, isCloudinaryConfigured } from '@/lib/cloudinary'
import { sendEmail } from '@/lib/email-service'

export async function POST(
  request: NextRequest,
  { params }: { params: { serviceId: string } }
) {
  try {
    const session = await getServerSession(request)
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const user = await prisma.user.findUnique({
      where: { id: parseInt(session.user.id) },
      select: { role: true }
    })

    if (user?.role !== 'ADMIN') {
      return NextResponse.json({ error: 'Forbidden' }, { status: 403 })
    }

    const { service } = await request.json()
    const { serviceId } = params

    let result: { success: boolean; message?: string; error?: string }

    switch (serviceId) {
      case 'cloudinary':
        result = await testCloudinary(service)
        break
      
      case 'email':
        result = await testEmail(service)
        break
      
      case 'payments':
        result = await testPayments(service)
        break
      
      case 'dadata':
        result = await testDaData(service)
        break
      
      case 'yandex-maps':
        result = await testYandexMaps(service)
        break
      
      case 'openai':
        result = await testOpenAI(service)
        break
      
      case 'yookassa':
        result = await testYooKassa(service)
        break
      
      default:
        return NextResponse.json({ 
          success: false, 
          error: 'Unknown service' 
        }, { status: 400 })
    }

    return NextResponse.json(result)

  } catch (error) {
    console.error('Error testing service:', error)
    return NextResponse.json({ 
      success: false, 
      error: 'Internal server error' 
    }, { status: 500 })
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cloudinary
async function testCloudinary(service: any): Promise<{ success: boolean; message?: string; error?: string }> {
  try {
    if (!service.enabled) {
      return { success: false, error: '–°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω' }
    }

    const { cloudName, apiKey, apiSecret } = service.config

    if (!cloudName || !apiKey || !apiSecret) {
      return { success: false, error: '–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if (!isCloudinaryConfigured()) {
      return { success: false, error: 'Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 –ø–∏–∫—Å–µ–ª—å PNG)
    const testImageBuffer = Buffer.from(
      'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==',
      'base64'
    )

    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const result = await uploadToCloudinary(testImageBuffer, {
      folder: 'kiddeo/test',
      public_id: `test_${Date.now()}`
    })

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    try {
      await prisma.systemSettings.updateMany({
        where: { key: 'cloudinary.testImageId' },
        data: { value: result.public_id }
      })
    } catch (error) {
      console.warn('Could not save test image ID:', error)
    }

    return { 
      success: true, 
      message: `–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${result.public_id}` 
    }

  } catch (error) {
    console.error('Cloudinary test failed:', error)
    return { 
      success: false, 
      error: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}` 
    }
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Email
async function testEmail(service: any): Promise<{ success: boolean; message?: string; error?: string }> {
  try {
    if (!service.enabled) {
      return { success: false, error: '–°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω' }
    }

    const { provider, fromEmail } = service.config

    if (!fromEmail) {
      return { success: false, error: 'Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω' }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
    const testResult = await sendEmail({
      to: fromEmail, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ
      subject: 'üß™ –¢–µ—Å—Ç Email —Å–µ—Ä–≤–∏—Å–∞ - Kiddeo',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #10b981;">‚úÖ –¢–µ—Å—Ç Email —Å–µ—Ä–≤–∏—Å–∞ —É—Å–ø–µ—à–µ–Ω!</h2>
          <p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</p>
          
          <div style="background-color: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #374151; margin-top: 0;">–î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞:</h3>
            <ul style="color: #6b7280;">
              <li><strong>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</strong> ${provider}</li>
              <li><strong>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</strong> ${fromEmail}</li>
              <li><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString('ru-RU')}</li>
            </ul>
          </div>
          
          <p>–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ, –∑–Ω–∞—á–∏—Ç email —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!</p>
          <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–°–∏—Å—Ç–µ–º–∞ Kiddeo</p>
        </div>
      `
    })

    if (testResult.success) {
      return { 
        success: true, 
        message: `–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${fromEmail}` 
      }
    } else {
      return { 
        success: false, 
        error: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${testResult.error}` 
      }
    }

  } catch (error) {
    console.error('Email test failed:', error)
    return { 
      success: false, 
      error: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}` 
    }
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Payments (API –¢–æ—á–∫–∏)
async function testPayments(service: any): Promise<{ success: boolean; message?: string; error?: string }> {
  try {
    if (!service.enabled) {
      return { success: false, error: '–°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω' }
    }

    const { apiUrl, clientId, clientSecret } = service.config

    if (!apiUrl || !clientId || !clientSecret) {
      return { success: false, error: '–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' }
    }

    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try {
      const response = await fetch(`${apiUrl}/health`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${clientId}`,
          'Content-Type': 'application/json'
        },
        signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      })

      if (response.ok) {
        return { 
          success: true, 
          message: 'API –¢–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.' 
        }
      } else {
        return { 
          success: false, 
          error: `API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: ${response.status}` 
        }
      }
    } catch (fetchError) {
      return { 
        success: false, 
        error: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: ${fetchError instanceof Error ? fetchError.message : 'Unknown error'}` 
      }
    }

  } catch (error) {
    console.error('Payments test failed:', error)
    return { 
      success: false, 
      error: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}` 
    }
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DaData
async function testDaData(service: any): Promise<{ success: boolean; message?: string; error?: string }> {
  try {
    if (!service.enabled) {
      return { success: false, error: '–°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω' }
    }

    const { apiKey, secretKey } = service.config

    if (!apiKey || !secretKey) {
      return { success: false, error: '–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API DaData
    try {
      const response = await fetch('https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address', {
        method: 'POST',
        headers: {
          'Authorization': `Token ${apiKey}`,
          'X-Secret': secretKey,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          query: '–ú–æ—Å–∫–≤–∞',
          count: 1
        }),
        signal: AbortSignal.timeout(10000)
      })

      if (response.ok) {
        const data = await response.json()
        return { 
          success: true, 
          message: `DaData —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: ${data.suggestions?.length || 0}` 
        }
      } else {
        return { 
          success: false, 
          error: `DaData API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: ${response.status}` 
        }
      }
    } catch (fetchError) {
      return { 
        success: false, 
        error: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DaData: ${fetchError instanceof Error ? fetchError.message : 'Unknown error'}` 
      }
    }

  } catch (error) {
    console.error('DaData test failed:', error)
    return { 
      success: false, 
      error: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}` 
    }
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç
async function testYandexMaps(service: any): Promise<{ success: boolean; message?: string; error?: string }> {
  try {
    if (!service.enabled) {
      return { success: false, error: '–°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω' }
    }

    const { apiKey } = service.config

    if (!apiKey) {
      return { success: false, error: 'API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω' }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    try {
      const response = await fetch(`https://geocode-maps.yandex.ru/1.x/?apikey=${apiKey}&geocode=–ú–æ—Å–∫–≤–∞&format=json`, {
        method: 'GET',
        signal: AbortSignal.timeout(10000)
      })

      if (response.ok) {
        const data = await response.json()
        const found = data.response?.GeoObjectCollection?.featureMember?.length || 0
        return { 
          success: true, 
          message: `–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${found}` 
        }
      } else {
        return { 
          success: false, 
          error: `–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: ${response.status}` 
        }
      }
    } catch (fetchError) {
      return { 
        success: false, 
        error: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞–º: ${fetchError instanceof Error ? fetchError.message : 'Unknown error'}` 
      }
    }

  } catch (error) {
    console.error('Yandex Maps test failed:', error)
    return { 
      success: false, 
      error: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}` 
    }
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI
async function testOpenAI(service: any): Promise<{ success: boolean; message?: string; error?: string }> {
  try {
    if (!service.enabled) {
      return { success: false, error: '–°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω' }
    }

    const { apiKey, model } = service.config

    if (!apiKey) {
      return { success: false, error: 'API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω' }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API
    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: model || 'gpt-3.5-turbo',
          messages: [
            { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç API.' }
          ],
          max_tokens: 50
        }),
        signal: AbortSignal.timeout(30000) // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ò–ò
      })

      if (response.ok) {
        const data = await response.json()
        const reply = data.choices?.[0]?.message?.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
        return { 
          success: true, 
          message: `OpenAI —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç: "${reply.substring(0, 50)}..."` 
        }
      } else {
        const errorData = await response.json().catch(() => ({}))
        return { 
          success: false, 
          error: `OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: ${response.status}. ${errorData.error?.message || ''}` 
        }
      }
    } catch (fetchError) {
      return { 
        success: false, 
        error: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI: ${fetchError instanceof Error ? fetchError.message : 'Unknown error'}` 
      }
    }

  } catch (error) {
    console.error('OpenAI test failed:', error)
    return { 
      success: false, 
      error: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}` 
    }
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YOOKASSA
async function testYooKassa(service: any): Promise<{ success: boolean; message?: string; error?: string }> {
  try {
    if (!service.enabled) {
      return { success: false, error: '–°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω' }
    }

    const { shopId, secretKey } = service.config

    if (!shopId || !secretKey) {
      return { success: false, error: '–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º YOOKASSA API
    try {
      const auth = Buffer.from(`${shopId}:${secretKey}`).toString('base64')
      const response = await fetch('https://api.yookassa.ru/v3/me', {
        method: 'GET',
        headers: {
          'Authorization': `Basic ${auth}`,
          'Content-Type': 'application/json'
        },
        signal: AbortSignal.timeout(10000)
      })

      if (response.ok) {
        const data = await response.json()
        return { 
          success: true, 
          message: `YOOKASSA —Ä–∞–±–æ—Ç–∞–µ—Ç! –ú–∞–≥–∞–∑–∏–Ω: ${data.account_id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}` 
        }
      } else {
        return { 
          success: false, 
          error: `YOOKASSA API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: ${response.status}` 
        }
      }
    } catch (fetchError) {
      return { 
        success: false, 
        error: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YOOKASSA: ${fetchError instanceof Error ? fetchError.message : 'Unknown error'}` 
      }
    }

  } catch (error) {
    console.error('YooKassa test failed:', error)
    return { 
      success: false, 
      error: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}` 
    }
  }
}
