import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import OpenAI from 'openai'
import { HttpsProxyAgent } from 'https-proxy-agent'

export const runtime = 'nodejs'

// GET - –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const key = searchParams.get('key')
    
    if (key !== 'kidsreview2025') {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    let settings = await prisma.reviewModerationSettings.findFirst()
    
    if (!settings) {
      // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      settings = await prisma.reviewModerationSettings.create({
        data: {
          openaiApiKey: process.env.OPENAI_API_KEY || '',
          rules: process.env.REVIEW_MODERATION_RULES || '',
          isEnabled: process.env.REVIEW_MODERATION_ENABLED === 'true',
          autoApprove: process.env.REVIEW_MODERATION_AUTO_APPROVE === 'true',
          memoryContext: process.env.REVIEW_MODERATION_MEMORY || '',
          model: process.env.REVIEW_MODERATION_MODEL || 'gpt-4'
        }
      })
    }

    const responseSettings = {
      openaiApiKey: settings.openaiApiKey || process.env.OPENAI_API_KEY || '',
      rules: settings.rules || process.env.REVIEW_MODERATION_RULES || '',
      isEnabled: settings.isEnabled || process.env.REVIEW_MODERATION_ENABLED === 'true',
      autoApprove: settings.autoApprove || process.env.REVIEW_MODERATION_AUTO_APPROVE === 'true',
      memoryContext: settings.memoryContext || process.env.REVIEW_MODERATION_MEMORY || '',
      model: settings.model || process.env.REVIEW_MODERATION_MODEL || 'gpt-4'
    }

    return NextResponse.json({ settings: responseSettings })
  } catch (error) {
    console.error('Error fetching moderation settings:', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// POST - –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
export async function POST(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const key = searchParams.get('key')
    
    if (key !== 'kidsreview2025') {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { openaiApiKey, rules, isEnabled, autoApprove, memoryContext, model } = body

    console.log('üîß Updating universal moderation settings:', {
      hasApiKey: !!openaiApiKey,
      hasRules: !!rules,
      isEnabled,
      autoApprove,
      hasMemory: !!memoryContext,
      model
    })

    return NextResponse.json({ 
      success: true,
      message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
    })
  } catch (error) {
    console.error('Error updating moderation settings:', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// PUT - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
export async function PUT(request: NextRequest) {
  try {
    console.log('üîç PUT request received')
    
    const { searchParams } = new URL(request.url)
    const key = searchParams.get('key')
    
    if (key !== 'kidsreview2025') {
      console.error('‚ùå Unauthorized request')
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { reviewId, reviewType, rating, comment, photos, entityName, entityType } = body

    console.log('üìã Request data:', { reviewId, reviewType, rating, comment, entityName, entityType })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if (reviewId === 'test-review') {
      console.log('üß™ Test request detected, calling testModeration')
      return await testModeration(comment, entityName, entityType)
    }

    // –û–±—ã—á–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤
    console.log('üîÑ Regular moderation request')
    return await moderateReview(reviewId, reviewType, rating, comment, photos, entityName, entityType)
  } catch (error) {
    console.error('‚ùå Error in PUT moderation:', error)
    return NextResponse.json({ 
      error: 'AI moderation failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
async function testModeration(comment: string, entityName: string, entityType: string) {
  try {
    console.log('üß™ Starting test moderation:', { comment, entityName, entityType })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if (!process.env.OPENAI_API_KEY) {
      console.error('‚ùå OpenAI API key not found')
      throw new Error('OpenAI API key not configured')
    }
    
    console.log('‚úÖ OpenAI API key found')

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    const proxyUrl = process.env.HTTPS_PROXY || process.env.HTTP_PROXY
    const agent = proxyUrl ? new HttpsProxyAgent(proxyUrl) : undefined
    
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
      httpAgent: agent
    })

    const prompt = `
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ –¥–ª—è –¥–µ—Ç—Å–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
    
    –û—Ç–∑—ã–≤: "${comment}"
    –ú–µ—Å—Ç–æ: ${entityName} (${entityType})
    
    –û–ø—Ä–µ–¥–µ–ª–∏ —Ä–µ—à–µ–Ω–∏–µ: APPROVE, REJECT, –∏–ª–∏ NEEDS_REVIEW
    –û—Ü–µ–Ω–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 1
    –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
    
    –û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
    {
      "decision": "APPROVE|REJECT|NEEDS_REVIEW",
      "confidence": 0.85,
      "reason": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"
    }
    `

    console.log('ü§ñ Sending request to OpenAI...')
    
    const completion = await openai.chat.completions.create({
      model: process.env.REVIEW_MODERATION_MODEL || 'gpt-4',
      messages: [
        {
          role: "system",
          content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –¥–µ—Ç—Å–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.2,
      max_tokens: 500
    })
    
    console.log('‚úÖ OpenAI response received')

    const aiResponse = completion.choices[0]?.message?.content
    if (!aiResponse) {
      console.error('‚ùå No response from OpenAI')
      throw new Error('No response from OpenAI')
    }

    console.log('üìù AI Response:', aiResponse)

    const result = JSON.parse(aiResponse)
    console.log('‚úÖ Parsed result:', result)
    
    return NextResponse.json({
      success: true,
      decision: result.decision,
      confidence: result.confidence,
      reason: result.reason
    })
  } catch (error) {
    console.error('Test moderation error:', error)
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ OpenAI
    if (error instanceof Error) {
      if (error.message.includes('403') && error.message.includes('Country, region, or territory not supported')) {
        console.log('üåç OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
        return simulateModeration(comment, entityName, entityType)
      }
      if (error.message.includes('401') && error.message.includes('Incorrect API key')) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenAI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞.')
      }
      if (error.message.includes('429')) {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
      }
    }
    
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
async function moderateReview(reviewId: string, reviewType: string, rating: number, comment: string, photos: string | null, entityName: string, entityType: string) {
  try {
    if (!reviewId || !reviewType) {
      return NextResponse.json({ error: 'Missing reviewId or reviewType' }, { status: 400 })
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ê—Ñ–∏—à–∏ –∏ –ú–µ—Å—Ç
    const rules = process.env.REVIEW_MODERATION_RULES || `
    –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê –ú–û–î–ï–†–ê–¶–ò–ò –û–¢–ó–´–í–û–í:
    
    –û–¢–ö–õ–û–ù–Ø–¢–¨ –æ—Ç–∑—ã–≤—ã –µ—Å–ª–∏:
    1. –°–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É –∏–ª–∏ –º–∞—Ç
    2. –°–æ–¥–µ—Ä–∂–∞—Ç –ª–∏—á–Ω—ã–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –≤ –∞–¥—Ä–µ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤/–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
    3. –Ø–≤–ª—è—é—Ç—Å—è —Å–ø–∞–º–æ–º, —Ä–µ–∫–ª–∞–º–æ–π –∏–ª–∏ —Ñ–µ–π–∫–æ–≤—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏
    4. –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–º–µ (–Ω–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏/–º–µ—Å—Ç–µ)
    5. –°–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
    6. –ù–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ (–∫—Ä–æ–º–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ)
    7. –°–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è
    8. –°–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å–∏–ª–∏–∏ –∏–ª–∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–π
    9. –ö–æ–ø–∏—Ä—É—é—Ç –¥—Ä—É–≥–∏–µ –æ—Ç–∑—ã–≤—ã
    10. –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ (–º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤) –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    
    –û–î–û–ë–†–Ø–¢–¨ –æ—Ç–∑—ã–≤—ã –µ—Å–ª–∏:
    1. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏
    2. –°–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    3. –ß–µ—Å—Ç–Ω–æ –æ–ø–∏—Å—ã–≤–∞—é—Ç –æ–ø—ã—Ç (–¥–∞–∂–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π)
    4. –°–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    5. –ù–∞–ø–∏—Å–∞–Ω—ã –≤–µ–∂–ª–∏–≤–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É
    6. –ò–º–µ—é—Ç –∞–¥–µ–∫–≤–∞—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É (1-5 –∑–≤–µ–∑–¥)
    
    –û–¢–ü–†–ê–í–õ–Ø–¢–¨ –ù–ê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–£–Æ –ü–†–û–í–ï–†–ö–£ –µ—Å–ª–∏:
    1. –ü–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ (—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ, –Ω–æ –Ω–µ —è–≤–Ω–æ –Ω–∞—Ä—É—à–∞—é—â–∏–µ)
    2. –°–ª–æ–∂–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Å—É–∂–¥–µ–Ω–∏—è
    3. –û—Ç–∑—ã–≤—ã —Å –æ—Ü–µ–Ω–∫–æ–π 1-2 –∑–≤–µ–∑–¥—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
    `

    const memoryContext = process.env.REVIEW_MODERATION_MEMORY || `
    –ö–û–ù–¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
    - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ Kiddeo –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –º–µ—Å—Ç
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: —Ä–æ–¥–∏—Ç–µ–ª–∏ —Å –¥–µ—Ç—å–º–∏
    - –í–∞–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
    - –ö—Ä–∏—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π
    - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–π –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    - –¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏: ${entityType} "${entityName}"
    `

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if (!process.env.OPENAI_API_KEY) {
      console.error('‚ùå OpenAI API key not found')
      return NextResponse.json({ 
        error: 'OpenAI API key not configured',
        details: 'Please set OPENAI_API_KEY environment variable'
      }, { status: 400 })
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    const proxyUrl = process.env.HTTPS_PROXY || process.env.HTTP_PROXY
    const agent = proxyUrl ? new HttpsProxyAgent(proxyUrl) : undefined
    
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
      httpAgent: agent
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const prompt = `
${memoryContext}

${rules}

–ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ô –û–¢–ó–´–í:
–¢–∏–ø: ${reviewType === 'venue' ? '–ú–µ—Å—Ç–æ' : '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'}
–ù–∞–∑–≤–∞–Ω–∏–µ: ${entityName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–û—Ü–µ–Ω–∫–∞: ${rating}/5 –∑–≤–µ–∑–¥
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}
–§–æ—Ç–æ: ${photos ? '–ï—Å—Ç—å —Ñ–æ—Ç–æ' : '–ë–µ–∑ —Ñ–æ—Ç–æ'}

–ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–∑—ã–≤ –ø–æ –≤—Å–µ–º –ø—Ä–∞–≤–∏–ª–∞–º –≤—ã—à–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Ä–µ—à–µ–Ω–∏–µ.

–û–¢–í–ï–¢ –í –§–û–†–ú–ê–¢–ï JSON:
{
  "decision": "APPROVE" | "REJECT" | "NEEDS_REVIEW",
  "reason": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
  "confidence": 0.95,
  "analysis": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤",
  "violations": ["—Å–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å"],
  "suggestions": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å"
}
`

    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const model = process.env.REVIEW_MODERATION_MODEL || 'gpt-4'
    
    console.log('ü§ñ Sending request to OpenAI with model:', model)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
    const completion = await openai.chat.completions.create({
      model: model,
      messages: [
        {
          role: "system",
          content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –¥–µ—Ç—Å–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –∏ —Å —É—á–µ—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–π."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.2,
      max_tokens: 1500
    })

    console.log('‚úÖ OpenAI response received')

    const aiResponse = completion.choices[0]?.message?.content
    if (!aiResponse) {
      throw new Error('No response from OpenAI')
    }

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç AI
    let aiDecision
    try {
      aiDecision = JSON.parse(aiResponse)
    } catch (parseError) {
      console.error('Error parsing AI response:', parseError)
      aiDecision = {
        decision: "NEEDS_REVIEW",
        reason: "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ AI",
        confidence: 0.5,
        analysis: aiResponse,
        violations: [],
        suggestions: ""
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    let finalStatus = 'MODERATION'
    if (aiDecision.decision === 'APPROVE') {
      finalStatus = 'APPROVED'
    } else if (aiDecision.decision === 'REJECT') {
      finalStatus = 'REJECTED'
    }
    // –ï—Å–ª–∏ NEEDS_REVIEW - –æ—Å—Ç–∞–µ—Ç—Å—è MODERATION –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const reviewModel = reviewType === 'venue' ? 'venueReview' : 'eventReview'
    await prisma[reviewModel].update({
      where: { id: reviewId },
      data: { status: finalStatus }
    })

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    console.log('ü§ñ Universal AI Moderation Result:', {
      reviewId,
      reviewType,
      entityName,
      aiDecision: aiDecision.decision,
      finalStatus,
      confidence: aiDecision.confidence,
      violations: aiDecision.violations
    })

    return NextResponse.json({
      success: true,
      decision: aiDecision.decision,
      reason: aiDecision.reason,
      confidence: aiDecision.confidence,
      analysis: aiDecision.analysis,
      violations: aiDecision.violations || [],
      suggestions: aiDecision.suggestions || '',
      finalStatus,
      reviewType,
      entityName
    })

  } catch (error) {
    console.error('Error in universal AI moderation:', error)
    return NextResponse.json({ 
      error: 'AI moderation failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
