import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import OpenAI from 'openai'

export const runtime = 'nodejs'

// GET - –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const key = searchParams.get('key')
    
    if (key !== 'kidsreview2025') {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–ø–æ–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    const settings = {
      openaiApiKey: process.env.OPENAI_API_KEY || '',
      rules: process.env.REVIEW_MODERATION_RULES || '',
      isEnabled: process.env.REVIEW_MODERATION_ENABLED === 'true',
      autoApprove: process.env.REVIEW_MODERATION_AUTO_APPROVE === 'true',
      memoryContext: process.env.REVIEW_MODERATION_MEMORY || ''
    }

    return NextResponse.json({ settings })
  } catch (error) {
    console.error('Error fetching moderation settings:', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// POST - –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
export async function POST(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const key = searchParams.get('key')
    
    if (key !== 'kidsreview2025') {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { openaiApiKey, rules, isEnabled, autoApprove, memoryContext } = body

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üîß Updating moderation settings:', {
      hasApiKey: !!openaiApiKey,
      hasRules: !!rules,
      isEnabled,
      autoApprove,
      hasMemory: !!memoryContext
    })

    return NextResponse.json({ 
      success: true,
      message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
    })
  } catch (error) {
    console.error('Error updating moderation settings:', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// PUT - –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ AI
export async function PUT(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const key = searchParams.get('key')
    
    if (key !== 'kidsreview2025') {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { reviewId, reviewType, rating, comment, photos } = body

    if (!reviewId || !reviewType) {
      return NextResponse.json({ error: 'Missing reviewId or reviewType' }, { status: 400 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    const rules = process.env.REVIEW_MODERATION_RULES || `
    –ü—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:
    1. –û—Ç–∫–ª–æ–Ω—è—Ç—å –æ—Ç–∑—ã–≤—ã —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π
    2. –û—Ç–∫–ª–æ–Ω—è—Ç—å –æ—Ç–∑—ã–≤—ã —Å –ª–∏—á–Ω—ã–º–∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è–º–∏
    3. –û—Ç–∫–ª–æ–Ω—è—Ç—å –æ—Ç–∑—ã–≤—ã —Å —Ä–µ–∫–ª–∞–º–æ–π –∏–ª–∏ —Å–ø–∞–º–æ–º
    4. –û—Ç–∫–ª–æ–Ω—è—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–µ –ø–æ —Ç–µ–º–µ
    5. –û–¥–æ–±—Ä—è—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏
    6. –û–¥–æ–±—Ä—è—Ç—å –æ—Ç–∑—ã–≤—ã —Å –æ—Ü–µ–Ω–∫–æ–π 1-2 –∑–≤–µ–∑–¥, –µ—Å–ª–∏ –æ–Ω–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω—ã
    `

    const memoryContext = process.env.REVIEW_MODERATION_MEMORY || `
    –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
    - –≠—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –º–µ—Å—Ç
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Å—Ç–∞–≤–ª—è—é—Ç –æ—Ç–∑—ã–≤—ã –æ –º–µ—Å—Ç–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö
    - –í–∞–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
    - –ö—Ä–∏—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π
    `

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const prompt = `
${memoryContext}

${rules}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤:

–û—Ü–µ–Ω–∫–∞: ${rating}/5 –∑–≤–µ–∑–¥
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}
–§–æ—Ç–æ: ${photos ? '–ï—Å—Ç—å —Ñ–æ—Ç–æ' : '–ë–µ–∑ —Ñ–æ—Ç–æ'}

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–∑—ã–≤ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É?
2. –°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ª–∏—á–Ω—ã–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è?
3. –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ø–∞–º–æ–º –∏–ª–∏ —Ä–µ–∫–ª–∞–º–æ–π?
4. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–º–µ?
5. –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º?

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "decision": "APPROVE" | "REJECT" | "NEEDS_REVIEW",
  "reason": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
  "confidence": 0.95,
  "analysis": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–∞"
}
`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–∑—ã–≤—ã –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 1000
    })

    const aiResponse = completion.choices[0]?.message?.content
    if (!aiResponse) {
      throw new Error('No response from OpenAI')
    }

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç AI
    let aiDecision
    try {
      aiDecision = JSON.parse(aiResponse)
    } catch (parseError) {
      console.error('Error parsing AI response:', parseError)
      aiDecision = {
        decision: "NEEDS_REVIEW",
        reason: "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ AI",
        confidence: 0.5,
        analysis: aiResponse
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    let finalStatus = 'MODERATION'
    if (aiDecision.decision === 'APPROVE') {
      finalStatus = 'APPROVED'
    } else if (aiDecision.decision === 'REJECT') {
      finalStatus = 'REJECTED'
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const reviewModel = reviewType === 'venue' ? 'venueReview' : 'eventReview'
    await prisma[reviewModel].update({
      where: { id: reviewId },
      data: { status: finalStatus }
    })

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    console.log('ü§ñ AI Moderation Result:', {
      reviewId,
      reviewType,
      aiDecision: aiDecision.decision,
      finalStatus,
      confidence: aiDecision.confidence
    })

    return NextResponse.json({
      success: true,
      decision: aiDecision.decision,
      reason: aiDecision.reason,
      confidence: aiDecision.confidence,
      analysis: aiDecision.analysis,
      finalStatus
    })

  } catch (error) {
    console.error('Error in AI moderation:', error)
    return NextResponse.json({ 
      error: 'AI moderation failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
