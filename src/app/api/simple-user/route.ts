import { NextRequest, NextResponse } from 'next/server'
import { verifyJWT } from '@/lib/jwt'

export const dynamic = 'force-dynamic'
export const revalidate = 30 // –ö—ç—à –Ω–∞ 30 —Å–µ–∫—É–Ω–¥

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é JWT –≤–º–µ—Å—Ç–æ getServerSession
export async function GET(request: NextRequest) {
  const startTime = Date.now()
  
  try {
    const token = request.cookies.get('session')?.value
    console.log('üîç SIMPLE-USER: Token check:', {
      hasToken: !!token,
      tokenLength: token?.length
    })
    
    if (!token) {
      console.log('‚ùå SIMPLE-USER: No token found')
      return NextResponse.json({ 
        success: false,
        user: null,
        message: 'Not authenticated'
      })
    }

    // –ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è JWT —Å —Ç–∞–π–º–∞—É—Ç–æ–º 1 —Å–µ–∫—É–Ω–¥–∞
    console.log('üîç SIMPLE-USER: Verifying JWT token')
    const payload = await Promise.race([
      verifyJWT(token),
      new Promise<null>((resolve) => setTimeout(() => resolve(null), 1000))
    ]) as any
    
    console.log('üîç SIMPLE-USER: JWT verification result:', {
      hasPayload: !!payload,
      payload: payload ? { sub: payload.sub, name: payload.name, email: payload.email } : null
    })
    
    if (!payload) {
      console.log('‚ùå SIMPLE-USER: Invalid JWT token')
      return NextResponse.json({ 
        success: false,
        user: null,
        message: 'Invalid session'
      })
    }

    const duration = Date.now() - startTime
    if (duration > 500) {
      console.warn(`‚ö†Ô∏è Slow /api/simple-user: ${duration}ms`)
    }

    const userData = {
      id: parseInt(payload.sub), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      name: payload.name,
      email: payload.email,
      image: null // JWT –Ω–µ —Ö—Ä–∞–Ω–∏—Ç image, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –≤ payload –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
    }
    
    console.log('‚úÖ SIMPLE-USER: Returning user data:', userData)
    
    const response = NextResponse.json({ 
      success: true,
      user: userData
    })
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    response.headers.set('Cache-Control', 's-maxage=30, stale-while-revalidate=120')
    
    return response
  } catch (error) {
    const duration = Date.now() - startTime
    console.error(`‚ùå /api/simple-user error after ${duration}ms:`, error)
    return NextResponse.json({ 
      success: false,
      user: null,
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
