// src/app/vendor/onboarding/page.tsx
import { getServerSession  } from "@/lib/auth-utils"
import { redirect } from "next/navigation"
import { revalidatePath } from "next/cache"
import prisma from "@/lib/db"
import VendorOnboardingClient from "./VendorOnboardingClient"
import VendorModerationWaiting from "./VendorModerationWaiting"
import { cookies } from "next/headers"

export const dynamic = "force-dynamic"

export default async function VendorOnboardingPage() {
  // –ü–æ–ª—É—á–∞–µ–º cookies –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ getServerSession
  const cookieStore = await cookies()
  const sessionCookie = cookieStore.get('session')
  
  console.log('üîç VENDOR ONBOARDING: Starting page load')
  console.log('üîç VENDOR ONBOARDING: Session cookie exists:', !!sessionCookie)
  
  const session = await getServerSession()
  
  console.log('üîç VENDOR ONBOARDING: Session result:', { 
    hasSession: !!session, 
    userId: session?.user?.id,
    userEmail: session?.user?.email 
  })
  
  if (!session?.user?.id) {
    console.log('üîç VENDOR ONBOARDING: No session, redirecting to login')
    redirect("/?login=true")
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–µ–Ω–¥–æ—Ä
  const existingVendor = await prisma.vendor.findUnique({
    where: { userId: parseInt(session.user.id) }, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
    include: {
      VendorOnboarding: true
    }
  })

  console.log('Vendor onboarding page: existingVendor', existingVendor)

  if (!existingVendor) {
    console.log('No vendor found, redirecting to register')
    redirect('/vendor/register')
  }

  // –ï—Å–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥
  if (existingVendor.VendorOnboarding?.isCompleted) {
    console.log('Onboarding completed, redirecting to dashboard')
    redirect("/vendor/dashboard")
  }

  console.log('Showing onboarding for vendor', existingVendor.id, 'step', existingVendor.VendorOnboarding?.step)

  // –ï—Å–ª–∏ –≤–µ–Ω–¥–æ—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
  if (existingVendor.kycStatus === 'SUBMITTED') {
    console.log('Vendor is under moderation, showing waiting step')
    return <VendorModerationWaiting vendor={existingVendor as any} />
  }

  // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
  const cities = await prisma.city.findMany({
    where: { isPublic: true },
    orderBy: { name: 'asc' }
  })

  return <VendorOnboardingClient cities={cities} vendor={existingVendor as any} />
}