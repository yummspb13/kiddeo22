'use client';

import { useState } from 'react';
import { Unbounded } from 'next/font/google';
import './styles.css';

const unbounded = Unbounded({ subsets: ['latin', 'cyrillic'] });

// –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const categories = {
  'üìå –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã': [
    '–ü—Ä–æ—á–∏–π –¥–æ—Å—É–≥', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏', '–ê–∫–≤–∞–ø–∞—Ä–∫–∏', '–î–ª—è –æ—Å–æ–±—ã—Ö –¥–µ—Ç–µ–π', 
    '–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è', '–ó–æ–æ–ø–∞—Ä–∫–∏, –æ–∫–µ–∞–Ω–∞—Ä–∏—É–º—ã', '–ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã', 
    '–¢–µ–∞—Ç—Ä—ã –∏ —Ü–∏—Ä–∫–∏', '–ú—É–∑–µ–∏', '–ü–∞—Ä–∫–∏ / —ç–∫–æ—Ç—Ä–æ–ø—ã / –ø–ª–æ—â–∞–¥–∫–∏', 
    '–°–∞–ª–æ–Ω—ã –∫—Ä–∞—Å–æ—Ç—ã —Å –Ω—è–Ω–µ–π'
  ],
  'üìå –°–ø–æ—Ä—Ç': [
    '–¢–∞–Ω—Ü—ã', '–ë–æ–∫—Å', '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞', '–ê–π–∫–∏–¥–æ', 
    '–ë–∞—Å–∫–µ—Ç–±–æ–ª', '–õ—ã–∂–∏', '–ü–ª–∞–≤–∞–Ω–∏–µ', '–§—É—Ç–±–æ–ª', '–§–µ—Ö—Ç–æ–≤–∞–Ω–∏–µ', 
    '–§–∏–≥—É—Ä–Ω–æ–µ –∫–∞—Ç–∞–Ω–∏–µ', '–°–∫–µ–π—Ç / —Ä–æ–ª–∏–∫–∏ / BMX', '–¢–µ–Ω–Ω–∏—Å', 
    '–õ—ë–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞', '–ì–æ–ª—å—Ñ', '–ë–µ–≥–æ–≤—ã–µ –∫–ª—É–±—ã', '–ï—â—ë'
  ],
  'üìå –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': [
    '–û—Å–Ω–æ–≤–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ß–∞—Å—Ç–Ω—ã–µ —à–∫–æ–ª—ã', '–ß–∞—Å—Ç–Ω—ã–µ –¥–µ—Ç—Å–∞–¥—ã', 
    '–î–ª—è –æ—Å–æ–±—ã—Ö –¥–µ—Ç–µ–π', '–í–£–ó—ã', '–í–æ–µ–Ω–Ω—ã–µ —É—á–µ–±–Ω—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è', 
    '–†–∞–Ω–Ω–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä—É–±–µ–∂–æ–º', '–ú–æ–Ω—Ç–µ—Å—Å–æ—Ä–∏', 
    '–û–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã', '–í–∞–ª—å–¥–æ—Ä—Ñ', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 
    '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ', '–ú—É–∑—ã–∫–∞', '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–¢–µ–∞—Ç—Ä', 
    '–Ø–∑—ã–∫–∏', '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã', '–ö—Ä—É–∂–∫–∏'
  ],
  'üìå –ú–µ–¥–∏—Ü–∏–Ω–∞': [
    '–õ–æ–≥–æ–ø–µ–¥', '–ü—Å–∏—Ö–æ–ª–æ–≥ (–≤ –±—É–¥—É—â–µ–º)'
  ],
  'üìå –õ–∞–≥–µ—Ä—è': [
    '–õ–µ—Ç–Ω–∏–µ –ª–∞–≥–µ—Ä—è', '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –ª–∞–≥–µ—Ä—è', '–û–±—É—á–∞—é—â–∏–µ –ª–∞–≥–µ—Ä—è', 
    '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –ª–∞–≥–µ—Ä—è', '–ü—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–µ –ª–∞–≥–µ—Ä—è'
  ]
};

export default function TestTabsPage() {
  const [activeTab, setActiveTab] = useState('üìå –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã');

  return (
    <div className={`${unbounded.className} min-h-screen bg-gray-50`}>
      <div className="max-w-7xl mx-auto px-4 py-8">
        <div className="text-center mb-12">
          <h1 className="text-5xl font-bold text-gray-900 mb-4">
            –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–∞–±–æ–≤
          </h1>
          <p className="text-xl text-gray-600">
            –í—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç UI –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ—Å—Ç
          </p>
        </div>

        {/* –í–∞—Ä–∏–∞–Ω—Ç 1: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç–∞–±—ã */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">–í–∞—Ä–∏–∞–Ω—Ç 1: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç–∞–±—ã</h2>
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex flex-wrap border-b border-gray-200 mb-6">
              {Object.keys(categories).map((category) => (
                <button
                  key={category}
                  onClick={() => setActiveTab(category)}
                  className={`px-6 py-3 font-medium transition-all duration-200 ${
                    activeTab === category
                      ? 'border-b-2 border-blue-500 text-blue-600 bg-blue-50'
                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                  }`}
                >
                  {category}
                </button>
              ))}
            </div>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
              {categories[activeTab as keyof typeof categories].map((item, index) => (
                <div
                  key={index}
                  className="p-3 bg-gray-100 rounded-lg text-sm hover:bg-gray-200 transition-colors cursor-pointer"
                >
                  {item}
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* –í–∞—Ä–∏–∞–Ω—Ç 2: Pill —Ç–∞–±—ã */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">–í–∞—Ä–∏–∞–Ω—Ç 2: Pill —Ç–∞–±—ã</h2>
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex flex-wrap gap-2 mb-6">
              {Object.keys(categories).map((category) => (
                <button
                  key={category}
                  onClick={() => setActiveTab(category)}
                  className={`px-4 py-2 rounded-full font-medium transition-all duration-200 ${
                    activeTab === category
                      ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg'
                      : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                  }`}
                >
                  {category}
                </button>
              ))}
            </div>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
              {categories[activeTab as keyof typeof categories].map((item, index) => (
                <div
                  key={index}
                  className="p-3 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg text-sm hover:from-blue-100 hover:to-purple-100 transition-all cursor-pointer border border-blue-200"
                >
                  {item}
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* –í–∞—Ä–∏–∞–Ω—Ç 3: –ê–∫–∫–æ—Ä–¥–µ–æ–Ω */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">–í–∞—Ä–∏–∞–Ω—Ç 3: –ê–∫–∫–æ—Ä–¥–µ–æ–Ω</h2>
          <div className="bg-white rounded-xl shadow-lg overflow-hidden">
            {Object.keys(categories).map((category, categoryIndex) => (
              <div key={category} className="border-b border-gray-200 last:border-b-0">
                <button
                  onClick={() => setActiveTab(activeTab === category ? '' : category)}
                  className="w-full px-6 py-4 text-left flex items-center justify-between hover:bg-gray-50 transition-colors"
                >
                  <span className="font-medium text-lg">{category}</span>
                  <svg
                    className={`w-5 h-5 transition-transform ${
                      activeTab === category ? 'rotate-180' : ''
                    }`}
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
                {activeTab === category && (
                  <div className="px-6 pb-4">
                    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                      {categories[category as keyof typeof categories].map((item, index) => (
                        <div
                          key={index}
                          className="p-3 bg-gray-100 rounded-lg text-sm hover:bg-gray-200 transition-colors cursor-pointer"
                        >
                          {item}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </section>

        {/* –í–∞—Ä–∏–∞–Ω—Ç 4: –ö–∞—Ä—Ç–æ—á–∫–∏ —Å hover */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">–í–∞—Ä–∏–∞–Ω—Ç 4: –ö–∞—Ä—Ç–æ—á–∫–∏ —Å hover</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {Object.keys(categories).map((category) => (
              <div
                key={category}
                className={`bg-white rounded-xl shadow-lg p-6 cursor-pointer transition-all duration-300 hover:shadow-xl hover:scale-105 ${
                  activeTab === category ? 'ring-2 ring-blue-500 bg-blue-50' : ''
                }`}
                onClick={() => setActiveTab(category)}
              >
                <div className="text-2xl mb-3">{category.split(' ')[0]}</div>
                <h3 className="text-lg font-semibold mb-2">{category}</h3>
                <p className="text-sm text-gray-600">
                  {categories[category as keyof typeof categories].length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                </p>
                {activeTab === category && (
                  <div className="mt-4 pt-4 border-t border-gray-200">
                    <div className="grid grid-cols-1 gap-2">
                      {categories[category as keyof typeof categories].slice(0, 4).map((item, index) => (
                        <div key={index} className="text-xs bg-gray-100 p-2 rounded">
                          {item}
                        </div>
                      ))}
                      {categories[category as keyof typeof categories].length > 4 && (
                        <div className="text-xs text-gray-500">
                          +{categories[category as keyof typeof categories].length - 4} –µ—â—ë
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </section>

        {/* –í–∞—Ä–∏–∞–Ω—Ç 5: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">–í–∞—Ä–∏–∞–Ω—Ç 5: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª</h2>
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex overflow-x-auto space-x-4 pb-4 mb-6 scrollbar-hide">
              {Object.keys(categories).map((category) => (
                <button
                  key={category}
                  onClick={() => setActiveTab(category)}
                  className={`flex-shrink-0 px-6 py-3 rounded-full font-medium transition-all duration-200 ${
                    activeTab === category
                      ? 'bg-gradient-to-r from-green-400 to-blue-500 text-white shadow-lg'
                      : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                  }`}
                >
                  {category}
                </button>
              ))}
            </div>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
              {categories[activeTab as keyof typeof categories].map((item, index) => (
                <div
                  key={index}
                  className="p-3 bg-gradient-to-br from-green-50 to-blue-50 rounded-lg text-sm hover:from-green-100 hover:to-blue-100 transition-all cursor-pointer border border-green-200"
                >
                  {item}
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* –í–∞—Ä–∏–∞–Ω—Ç 6: –ú–æ–¥–∞–ª—å–Ω—ã–µ —Ç–∞–±—ã */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">–í–∞—Ä–∏–∞–Ω—Ç 6: –ú–æ–¥–∞–ª—å–Ω—ã–µ —Ç–∞–±—ã</h2>
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
              {Object.keys(categories).map((category) => (
                <button
                  key={category}
                  onClick={() => setActiveTab(category)}
                  className={`p-4 rounded-xl transition-all duration-200 ${
                    activeTab === category
                      ? 'bg-gradient-to-br from-purple-500 to-pink-500 text-white shadow-lg transform scale-105'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200 hover:scale-105'
                  }`}
                >
                  <div className="text-2xl mb-2">{category.split(' ')[0]}</div>
                  <div className="text-sm font-medium">{category}</div>
                </button>
              ))}
            </div>
            {activeTab && (
              <div className="mt-6 p-6 bg-gray-50 rounded-lg">
                <h3 className="text-xl font-semibold mb-4">{activeTab}</h3>
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                  {categories[activeTab as keyof typeof categories].map((item, index) => (
                    <div
                      key={index}
                      className="p-3 bg-white rounded-lg text-sm hover:bg-gray-100 transition-colors cursor-pointer border border-gray-200"
                    >
                      {item}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </section>

        {/* –í–∞—Ä–∏–∞–Ω—Ç 7: –î—Ä–µ–≤–æ–≤–∏–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">–í–∞—Ä–∏–∞–Ω—Ç 7: –î—Ä–µ–≤–æ–≤–∏–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞</h2>
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="space-y-2">
              {Object.keys(categories).map((category) => (
                <div key={category} className="border border-gray-200 rounded-lg">
                  <button
                    onClick={() => setActiveTab(activeTab === category ? '' : category)}
                    className="w-full px-4 py-3 text-left flex items-center justify-between hover:bg-gray-50 transition-colors"
                  >
                    <div className="flex items-center space-x-3">
                      <span className="text-xl">{category.split(' ')[0]}</span>
                      <span className="font-medium">{category}</span>
                    </div>
                    <svg
                      className={`w-4 h-4 transition-transform ${
                        activeTab === category ? 'rotate-90' : ''
                      }`}
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </button>
                  {activeTab === category && (
                    <div className="px-4 pb-3 border-t border-gray-100">
                      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 pt-3">
                        {categories[category as keyof typeof categories].map((item, index) => (
                          <div
                            key={index}
                            className="p-2 bg-gray-100 rounded text-xs hover:bg-gray-200 transition-colors cursor-pointer"
                          >
                            {item}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* –í–∞—Ä–∏–∞–Ω—Ç 8: –§–∏–ª—å—Ç—Ä —Å –ø–æ–∏—Å–∫–æ–º */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">–í–∞—Ä–∏–∞–Ω—Ç 8: –§–∏–ª—å—Ç—Ä —Å –ø–æ–∏—Å–∫–æ–º</h2>
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="mb-6">
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π..."
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div className="flex flex-wrap gap-2 mb-6">
              {Object.keys(categories).map((category) => (
                <button
                  key={category}
                  onClick={() => setActiveTab(category)}
                  className={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 ${
                    activeTab === category
                      ? 'bg-gradient-to-r from-orange-400 to-red-500 text-white shadow-lg'
                      : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                  }`}
                >
                  {category}
                </button>
              ))}
            </div>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
              {categories[activeTab as keyof typeof categories].map((item, index) => (
                <div
                  key={index}
                  className="p-3 bg-gradient-to-r from-orange-50 to-red-50 rounded-lg text-sm hover:from-orange-100 hover:to-red-100 transition-all cursor-pointer border border-orange-200"
                >
                  {item}
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* –í–∞—Ä–∏–∞–Ω—Ç 9: –¢–∞–±—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">–í–∞—Ä–∏–∞–Ω—Ç 9: –¢–∞–±—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏</h2>
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex flex-wrap gap-4 mb-6">
              {Object.keys(categories).map((category) => (
                <button
                  key={category}
                  onClick={() => setActiveTab(category)}
                  className={`relative overflow-hidden rounded-xl transition-all duration-300 ${
                    activeTab === category
                      ? 'ring-4 ring-blue-500 shadow-xl transform scale-105'
                      : 'hover:shadow-lg hover:scale-102'
                  }`}
                >
                  <div className="w-32 h-24 bg-gradient-to-br from-purple-400 to-pink-500 flex items-center justify-center text-white">
                    <div className="text-3xl">{category.split(' ')[0]}</div>
                  </div>
                  <div className="absolute inset-0 bg-black bg-opacity-20 flex items-end">
                    <div className="p-2 text-white text-sm font-medium truncate w-full">
                      {category}
                    </div>
                  </div>
                </button>
              ))}
            </div>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
              {categories[activeTab as keyof typeof categories].map((item, index) => (
                <div
                  key={index}
                  className="p-3 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg text-sm hover:from-purple-100 hover:to-pink-100 transition-all cursor-pointer border border-purple-200"
                >
                  {item}
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* –í–∞—Ä–∏–∞–Ω—Ç 10: –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">–í–∞—Ä–∏–∞–Ω—Ç 10: –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏</h2>
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex flex-wrap gap-4 mb-6">
              {Object.keys(categories).map((category) => (
                <button
                  key={category}
                  onClick={() => setActiveTab(category)}
                  className={`group relative p-4 rounded-xl transition-all duration-300 ${
                    activeTab === category
                      ? 'bg-gradient-to-r from-green-400 to-blue-500 text-white shadow-xl transform scale-110'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200 hover:scale-105'
                  }`}
                >
                  <div className="text-4xl mb-2 group-hover:animate-bounce">
                    {category.split(' ')[0]}
                  </div>
                  <div className="text-sm font-medium">{category}</div>
                  {activeTab === category && (
                    <div className="absolute -top-2 -right-2 w-4 h-4 bg-yellow-400 rounded-full animate-pulse"></div>
                  )}
                </button>
              ))}
            </div>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
              {categories[activeTab as keyof typeof categories].map((item, index) => (
                <div
                  key={index}
                  className="p-3 bg-gradient-to-r from-green-50 to-blue-50 rounded-lg text-sm hover:from-green-100 hover:to-blue-100 transition-all cursor-pointer border border-green-200 hover:animate-pulse"
                >
                  {item}
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* –í–∞—Ä–∏–∞–Ω—Ç 11: –ö–∞—Ä—É—Å–µ–ª—å —Å –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">–í–∞—Ä–∏–∞–Ω—Ç 11: –ö–∞—Ä—É—Å–µ–ª—å —Å –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π</h2>
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="relative overflow-hidden">
              <div className="flex space-x-4 animate-scroll">
                {Object.keys(categories).map((category) => (
                  <button
                    key={category}
                    onClick={() => setActiveTab(category)}
                    className={`flex-shrink-0 p-4 rounded-xl transition-all duration-300 ${
                      activeTab === category
                        ? 'bg-gradient-to-r from-orange-400 to-red-500 text-white shadow-xl transform scale-110'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200 hover:scale-105'
                    }`}
                  >
                    <div className="text-3xl mb-2">{category.split(' ')[0]}</div>
                    <div className="text-sm font-medium">{category}</div>
                  </button>
                ))}
              </div>
            </div>
            <div className="mt-6 grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
              {categories[activeTab as keyof typeof categories].map((item, index) => (
                <div
                  key={index}
                  className="p-3 bg-gradient-to-r from-orange-50 to-red-50 rounded-lg text-sm hover:from-orange-100 hover:to-red-100 transition-all cursor-pointer border border-orange-200"
                >
                  {item}
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* –í–∞—Ä–∏–∞–Ω—Ç 12: 3D –∫–∞—Ä—Ç–æ—á–∫–∏ */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">–í–∞—Ä–∏–∞–Ω—Ç 12: 3D –∫–∞—Ä—Ç–æ—á–∫–∏</h2>
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-6">
              {Object.keys(categories).map((category) => (
                <button
                  key={category}
                  onClick={() => setActiveTab(category)}
                  className={`group perspective-1000 transform transition-all duration-300 hover:scale-105 ${
                    activeTab === category
                      ? 'rotate-y-12 scale-110'
                      : 'hover:rotate-y-6'
                  }`}
                >
                  <div className="relative w-full h-32 bg-gradient-to-br from-indigo-400 via-purple-500 to-pink-500 rounded-xl shadow-lg group-hover:shadow-2xl transition-all duration-300">
                    <div className="absolute inset-0 bg-black bg-opacity-20 rounded-xl"></div>
                    <div className="absolute inset-0 flex flex-col items-center justify-center text-white">
                      <div className="text-4xl mb-2 group-hover:animate-spin">{category.split(' ')[0]}</div>
                      <div className="text-sm font-medium text-center">{category}</div>
                    </div>
                    {activeTab === category && (
                      <div className="absolute -top-2 -right-2 w-6 h-6 bg-yellow-400 rounded-full animate-ping"></div>
                    )}
                  </div>
                </button>
              ))}
            </div>
            {activeTab && (
              <div className="mt-8 p-6 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-xl">
                <h3 className="text-xl font-semibold mb-4 text-gray-800">{activeTab}</h3>
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                  {categories[activeTab as keyof typeof categories].map((item, index) => (
                    <div
                      key={index}
                      className="p-3 bg-white rounded-lg text-sm hover:bg-indigo-100 transition-all cursor-pointer border border-indigo-200 hover:shadow-md"
                    >
                      {item}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </section>

        {/* –í–∞—Ä–∏–∞–Ω—Ç 13: –í–æ–ª–Ω–æ–≤—ã–µ —Ç–∞–±—ã */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">–í–∞—Ä–∏–∞–Ω—Ç 13: –í–æ–ª–Ω–æ–≤—ã–µ —Ç–∞–±—ã</h2>
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex flex-wrap gap-3 mb-6">
              {Object.keys(categories).map((category) => (
                <button
                  key={category}
                  onClick={() => setActiveTab(category)}
                  className={`relative overflow-hidden px-6 py-3 rounded-full font-medium transition-all duration-300 ${
                    activeTab === category
                      ? 'bg-gradient-to-r from-cyan-400 to-blue-500 text-white shadow-lg transform scale-105'
                      : 'bg-gray-200 text-gray-700 hover:bg-gray-300 hover:scale-102'
                  }`}
                >
                  <div className="flex items-center space-x-2">
                    <span className="text-xl">{category.split(' ')[0]}</span>
                    <span className="text-sm">{category}</span>
                  </div>
                  {activeTab === category && (
                    <div className="absolute inset-0 bg-white opacity-20 animate-pulse"></div>
                  )}
                </button>
              ))}
            </div>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
              {categories[activeTab as keyof typeof categories].map((item, index) => (
                <div
                  key={index}
                  className="p-3 bg-gradient-to-r from-cyan-50 to-blue-50 rounded-lg text-sm hover:from-cyan-100 hover:to-blue-100 transition-all cursor-pointer border border-cyan-200 hover:animate-pulse"
                >
                  {item}
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* –í–∞—Ä–∏–∞–Ω—Ç 14: –ü–ª–∞–≤–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold mb-6 text-gray-800">–í–∞—Ä–∏–∞–Ω—Ç 14: –ü–ª–∞–≤–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã</h2>
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex flex-wrap gap-4 mb-6">
              {Object.keys(categories).map((category, index) => (
                <button
                  key={category}
                  onClick={() => setActiveTab(category)}
                  className={`group relative p-4 rounded-xl transition-all duration-500 ${
                    activeTab === category
                      ? 'bg-gradient-to-r from-pink-400 to-rose-500 text-white shadow-xl transform scale-110'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200 hover:scale-105'
                  }`}
                  style={{
                    animationDelay: `${index * 0.1}s`,
                    animation: 'float 3s ease-in-out infinite'
                  }}
                >
                  <div className="text-3xl mb-2 group-hover:animate-bounce">{category.split(' ')[0]}</div>
                  <div className="text-sm font-medium">{category}</div>
                  {activeTab === category && (
                    <div className="absolute -top-1 -right-1 w-3 h-3 bg-yellow-400 rounded-full animate-ping"></div>
                  )}
                </button>
              ))}
            </div>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
              {categories[activeTab as keyof typeof categories].map((item, index) => (
                <div
                  key={index}
                  className="p-3 bg-gradient-to-r from-pink-50 to-rose-50 rounded-lg text-sm hover:from-pink-100 hover:to-rose-100 transition-all cursor-pointer border border-pink-200"
                >
                  {item}
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <section className="bg-blue-50 rounded-xl p-8">
          <h2 className="text-2xl font-bold mb-4 text-blue-900">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
          <div className="space-y-4 text-blue-800">
            <p>‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ —É–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</p>
            <p>‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</p>
            <p>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</p>
            <p>‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –¥–∏–∑–∞–π–Ω–∞</p>
            <p>‚Ä¢ –£—á—Ç–∏—Ç–µ, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—É–¥–µ—Ç –º–Ω–æ–≥–æ, –ø–æ—ç—Ç–æ–º—É –≤–∞–∂–Ω–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å</p>
            <p>‚Ä¢ <strong>–ù–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</strong> –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –¥–∏–Ω–∞–º–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏</p>
          </div>
        </section>
      </div>
    </div>
  );
}
