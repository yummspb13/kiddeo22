#!/usr/bin/env node

/**
 * export-current-data.js - –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–π –ë–î
 * –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª restore-database.js —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node export-current-data.js
 */

const { PrismaClient } = require('@prisma/client')
const fs = require('fs')
const path = require('path')

const prisma = new PrismaClient()

async function exportAllData() {
  console.log('üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
  
  try {
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    const data = {
      cities: await prisma.city.findMany(),
      users: await prisma.user.findMany(),
      vendors: await prisma.vendor.findMany(),
      venues: await prisma.venue.findMany(),
      categories: await prisma.category.findMany(),
      subcategories: await prisma.subcategory.findMany(),
      parameters: await prisma.venueParameter.findMany(),
      filters: await prisma.venueFilter.findMany(),
      tariffPlans: await prisma.vendorTariffPlan.findMany(),
      popularCategories: await prisma.popularCategory.findMany(),
      events: await prisma.event.findMany(),
      venueReviews: await prisma.venueReview.findMany(),
      eventReviews: await prisma.eventReview.findMany(),
      venueClaims: await prisma.venueClaim.findMany(),
      listingClaims: await prisma.listingClaim.findMany(),
      vendorSubscriptions: await prisma.vendorSubscription.findMany(),
      vendorOnboardings: await prisma.vendorOnboarding.findMany(),
      vendorRoles: await prisma.vendorRole.findMany(),
      venuePartners: await prisma.venuePartner.findMany(),
      userSessions: await prisma.userSession.findMany()
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
    const exportPath = path.join(__dirname, 'database-export.json')
    fs.writeFileSync(exportPath, JSON.stringify(data, null, 2))
    
    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: ${exportPath}`)
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:')
    Object.entries(data).forEach(([table, records]) => {
      console.log(`   - ${table}: ${records.length} –∑–∞–ø–∏—Å–µ–π`)
    })

    return data

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error)
    throw error
  }
}

async function updateRestoreScript(exportedData) {
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...')
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª restore-database.js
    const restorePath = path.join(__dirname, 'restore-database.js')
    let content = fs.readFileSync(restorePath, 'utf8')
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–∫—Ä–∏–ø—Ç–µ
    const dataString = JSON.stringify(exportedData, null, 2)
    
    // –ó–∞–º–µ–Ω—è–µ–º —Å–µ–∫—Ü–∏—é databaseData
    const regex = /const databaseData = \{[\s\S]*?\}/
    const newDataSection = `const databaseData = ${dataString}`
    
    content = content.replace(regex, newDataSection)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(restorePath, content)
    
    console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error)
    throw error
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...')
  
  try {
    const exportedData = await exportAllData()
    await updateRestoreScript(exportedData)
    
    console.log('\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:')
    console.log('   - database-export.json (–ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç)')
    console.log('   - restore-database.js (–æ–±–Ω–æ–≤–ª–µ–Ω)')
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main()
}

module.exports = { exportAllData, updateRestoreScript }
