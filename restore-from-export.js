#!/usr/bin/env node

/**
 * restore-from-export.js - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ database-export.json
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ Prisma –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ–± –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
 * –∏–ª–∏ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node restore-from-export.js
 */

const { PrismaClient } = require('@prisma/client')
const fs = require('fs')
const path = require('path')

const prisma = new PrismaClient()

// –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
let databaseData = {}

try {
  const exportPath = path.join(__dirname, 'database-export.json')
  if (fs.existsSync(exportPath)) {
    const exportData = fs.readFileSync(exportPath, 'utf8')
    databaseData = JSON.parse(exportData)
    console.log('üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
  } else {
    console.log('‚ö†Ô∏è  –§–∞–π–ª database-export.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ')
    // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    databaseData = {
      City: [
        { id: 1, slug: 'moscow', name: '–ú–æ—Å–∫–≤–∞', isPublic: true },
        { id: 2, slug: 'spb', name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', isPublic: true },
        { id: 3, slug: 'ekaterinburg', name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', isPublic: true }
      ],
      User: [
        {
          id: 1,
          email: 'admin@kiddeo.ru',
          name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          role: 'ADMIN',
          emailVerified: new Date(),
          createdAt: new Date(),
          updatedAt: new Date()
        }
      ],
      Vendor: [],
      VenuePartner: [],
      VenueReview: [],
      Category: [],
      VenueCategory: [],
      VenueSubcategory: [],
      VendorTariffPlan: [],
      PopularCategory: []
    }
  }
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
  process.exit(1)
}

async function clearDatabase() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const tables = await prisma.$queryRaw`
      SELECT name FROM sqlite_master 
      WHERE type='table' AND name NOT LIKE 'sqlite_%' AND name NOT LIKE '_prisma_%'
      ORDER BY name
    `
    
    // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    for (const table of tables) {
      try {
        await prisma.$executeRawUnsafe(`DELETE FROM "${table.name}"`)
        console.log(`‚úÖ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: ${table.name}`)
      } catch (error) {
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: ${table.name} (${error.message})`)
      }
    }
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error)
    throw error
  }
}

async function restoreData() {
  console.log('üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...')
  
  try {
    let totalRestored = 0
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
    for (const [tableName, records] of Object.entries(databaseData)) {
      if (!Array.isArray(records) || records.length === 0) {
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ ${tableName}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö`)
        continue
      }
      
      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å Prisma –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        const modelName = getModelName(tableName)
        if (!modelName) {
          console.log(`‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: ${tableName}`)
          continue
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
        for (const record of records) {
          try {
            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –æ—Ç null –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–∞–º
            const cleanRecord = cleanRecordData(record)
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            await prisma[modelName].create({ data: cleanRecord })
            totalRestored++
            
          } catch (recordError) {
            console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ ${tableName}: ${recordError.message}`)
          }
        }
        
        console.log(`‚úÖ ${tableName}: ${records.length} –∑–∞–ø–∏—Å–µ–π`)
        
      } catch (tableError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ${tableName}: ${tableError.message}`)
      }
    }
    
    console.log(`\nüéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${totalRestored} –∑–∞–ø–∏—Å–µ–π!`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
    throw error
  }
}

function getModelName(tableName) {
  // –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω —Ç–∞–±–ª–∏—Ü –Ω–∞ –º–æ–¥–µ–ª–∏ Prisma
  const modelMap = {
    'City': 'city',
    'User': 'user',
    'Vendor': 'vendor',
    'VenuePartner': 'venuePartner',
    'VenueReview': 'venueReview',
    'Category': 'category',
    'VenueCategory': 'venueCategory',
    'VenueSubcategory': 'venueSubcategory',
    'VendorTariffPlan': 'vendorTariffPlan',
    'PopularCategory': 'popularCategory',
    'EventReview': 'eventReview',
    'UserSession': 'userSession',
    'VendorOnboarding': 'vendorOnboarding',
    'VendorRole': 'vendorRole',
    'VendorSubscription': 'vendorSubscription',
    'VenueClaim': 'venueClaim',
    'ListingClaim': 'listingClaim',
    'AdEvent': 'adEvent',
    'AdPlacement': 'adPlacement',
    'AfishaCategory': 'afishaCategory',
    'AfishaEvent': 'afishaEvent',
    'AuditLog': 'auditLog',
    'BankAccount': 'bankAccount',
    'TaxProfile': 'taxProfile',
    'Cart': 'cart',
    'UserBehaviorEvent': 'userBehaviorEvent',
    'UserChild': 'userChild',
    'UserInvite': 'userInvite',
    'UserNotificationSettings': 'userNotificationSettings',
    'UserPoints': 'userPoints',
    'UserSettings': 'userSettings',
    'Document': 'document',
    'EventView': 'eventView',
    'Favorite': 'favorite',
    'PointsTransaction': 'pointsTransaction',
    'ReviewReaction': 'reviewReaction',
    'ReviewReply': 'reviewReply',
    'VenueCategoryCity': 'venueCategoryCity',
    'VenueSubcategoryCity': 'venueSubcategoryCity',
    'VenueView': 'venueView'
  }
  
  return modelMap[tableName] || null
}

function cleanRecordData(record) {
  const cleaned = { ...record }
  
  // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è —Å null –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  Object.keys(cleaned).forEach(key => {
    if (cleaned[key] === null) {
      delete cleaned[key]
    }
  })
  
  // –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
  const dateFields = ['createdAt', 'updatedAt', 'emailVerified', 'moderatedAt', 'expiresAt']
  dateFields.forEach(field => {
    if (cleaned[field] && typeof cleaned[field] === 'string') {
      cleaned[field] = new Date(cleaned[field])
    }
  })
  
  // –ü—Ä–∏–≤–æ–¥–∏–º JSON –ø–æ–ª—è
  const jsonFields = ['features', 'workingHours', 'coordinates', 'proofData', 'agreements', 'options']
  jsonFields.forEach(field => {
    if (cleaned[field] && typeof cleaned[field] === 'string') {
      try {
        cleaned[field] = JSON.parse(cleaned[field])
      } catch (e) {
        // –ï—Å–ª–∏ –Ω–µ JSON, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      }
    }
  })
  
  return cleaned
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Kiddeo...')
  console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!')
  
  try {
    await clearDatabase()
    await restoreData()
    
    console.log('\n‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:')
    
    let totalRecords = 0
    Object.entries(databaseData).forEach(([table, records]) => {
      if (Array.isArray(records)) {
        console.log(`   - ${table}: ${records.length} –∑–∞–ø–∏—Å–µ–π`)
        totalRecords += records.length
      }
    })
    console.log(`   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalRecords}`)
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main()
}

module.exports = { clearDatabase, restoreData, databaseData }
