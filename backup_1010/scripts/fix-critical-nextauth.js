#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å NextAuth...\n');

// –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const criticalFiles = [
  'src/app/api/points/route.ts',
  'src/app/api/points/spend/route.ts',
  'src/app/api/points/transactions/route.ts',
  'src/app/api/points/rewards/route.ts',
  'src/app/api/profile/settings/route.ts',
  'src/app/api/profile/upload-avatar/route.ts',
  'src/app/api/profile/orders/route.ts',
  'src/app/api/profile/notifications/route.ts',
  'src/app/api/profile/notifications/settings/route.ts',
  'src/app/api/profile/change-password/route.ts',
  'src/app/api/simple-user/route.ts',
  'src/app/api/debug-vendor/route.ts',
  'src/app/api/vendor/venues/route.ts',
  'src/app/api/vendor/venues/[id]/route.ts',
  'src/app/api/vendor/upload-document/route.ts',
  'src/app/api/vendors/start/route.ts',
  'src/app/api/vendors/resubmit/route.ts',
  'src/app/api/vendors/upgrade/route.ts',
  'src/app/api/listings/claim/route.ts',
  'src/app/api/admin/vendors/pending/route.ts',
  'src/app/api/admin/vendor-moderation-history/route.ts',
  'src/app/api/debug-session/route.ts'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function fixFile(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return false;
    }

    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;

    // –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if (content.includes("from 'next-auth'")) {
      content = content.replace(/from 'next-auth'/g, "from '@/lib/auth-server'");
      modified = true;
    }
    if (content.includes('from "next-auth"')) {
      content = content.replace(/from "next-auth"/g, 'from "@/lib/auth-server"');
      modified = true;
    }
    if (content.includes("from 'next-auth/jwt'")) {
      content = content.replace(/from 'next-auth\/jwt'/g, "from '@/lib/auth-server'");
      modified = true;
    }
    if (content.includes('from "next-auth/jwt"')) {
      content = content.replace(/from "next-auth\/jwt"/g, 'from "@/lib/auth-server"');
      modified = true;
    }

    // –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç authOptions
    if (content.includes("import { authOptions } from '@/auth'")) {
      content = content.replace(/import { authOptions } from '\/@\/auth'\n/g, '');
      modified = true;
    }
    if (content.includes('import { authOptions } from "@/auth"')) {
      content = content.replace(/import { authOptions } from "\/@\/auth"\n/g, '');
      modified = true;
    }

    // –ó–∞–º–µ–Ω—è–µ–º getServerSession(authOptions) –Ω–∞ getServerSession(request)
    if (content.includes('getServerSession(authOptions)')) {
      content = content.replace(/getServerSession\(authOptions\)/g, 'getServerSession(request)');
      modified = true;
    }

    // –ó–∞–º–µ–Ω—è–µ–º getServerSession() –Ω–∞ getServerSession(request) –≤ API routes
    if (filePath.includes('/api/') && content.includes('getServerSession()')) {
      content = content.replace(/getServerSession\(\)/g, 'getServerSession(request)');
      modified = true;
    }

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ user.id –≤–º–µ—Å—Ç–æ user.uid
    if (content.includes('session?.user?.uid')) {
      content = content.replace(/session\?\.user\?\.uid/g, 'session?.user?.id');
      modified = true;
    }
    if (content.includes('session.user.uid')) {
      content = content.replace(/session\.user\.uid/g, 'session.user.id');
      modified = true;
    }

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º parseInt –¥–ª—è user.id
    if (content.includes('userId: session.user.id')) {
      content = content.replace(/userId: session\.user\.id/g, 'userId: parseInt(session.user.id)');
      modified = true;
    }

    if (modified) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
      return true;
    } else {
      console.log(`‚ÑπÔ∏è  –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${filePath}`);
      return false;
    }

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  let fixedCount = 0;
  let totalCount = criticalFiles.length;

  console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${totalCount} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...\n`);

  criticalFiles.forEach(filePath => {
    if (fixFile(filePath)) {
      fixedCount++;
    }
  });

  console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
  console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedCount}/${totalCount}`);
  
  if (fixedCount > 0) {
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤—Ä—É—á–Ω—É—é');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É API');
    console.log('3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã');
  }
}

// –ó–∞–ø—É—Å–∫
main();
