'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { CheckCircle, XCircle, ArrowRight, ArrowLeft, Building2, CreditCard, FileText, Upload, Search, Loader2 } from 'lucide-react'
import INNAutocomplete from '@/components/INNAutocomplete'
import BIKAutocomplete from '@/components/BIKAutocomplete'
import '@/styles/vendor-dashboard.css'

interface Vendor {
  id: number
  type: string
  kycStatus: string
  displayName: string
  vendorRole?: unknown
  bankAccounts: unknown[]
  taxProfiles: unknown[]
  documents: unknown[]
}

interface UpgradeToProClientProps {
  vendor: Vendor
}

interface CompanyData {
  found: boolean
  data?: {
    name: {
      full: string
      short: string
    }
    inn: string
    kpp: string
    ogrn: string
    address: {
      full: string
      region: string
      city: string
    }
    management: {
      name: string
      post: string
    }
    status: string
    taxation: {
      regime: string
      vat: boolean
    }
  }
}

export default function UpgradeToProClient({ vendor }: UpgradeToProClientProps) {
  const router = useRouter()
  const [currentStep, setCurrentStep] = useState(1)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState<string | null>(null)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    // –®–∞–≥ 1: –†–æ–ª—å –≤–µ–Ω–¥–æ—Ä–∞
    role: (vendor.vendorRole as any)?.role || 'NPD',
    
    // –®–∞–≥ 2: –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ DaData)
    companyData: {
      inn: (vendor.vendorRole as any)?.inn || '',
      ogrn: (vendor.vendorRole as any)?.orgn || '',
      orgnip: (vendor.vendorRole as any)?.orgnip || '',
      companyName: (vendor.vendorRole as any)?.companyName || '',
      fullName: (vendor.vendorRole as any)?.fullName || '',
      directorName: (vendor.vendorRole as any)?.directorName || '',
      address: (vendor.vendorRole as any)?.address || ''
    },
    
    // –®–∞–≥ 3: –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    bankAccount: {
      holderName: '',
      inn: '',
      bankName: '',
      bik: '',
      account: '',
      corrAccount: ''
    },
    
    // –®–∞–≥ 4: –ù–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    taxProfile: {
      taxRegime: 'NPD',
      vatStatus: 'NONE',
      vatRate: 0,
      isVatPayer: false,
      fiscalMode: 'PLATFORM',
      agencyAgreement: false
    },
    
    // –®–∞–≥ 5: –î–æ–∫—É–º–µ–Ω—Ç—ã
    documents: [] as File[]
  })


  const steps = [
    { id: 1, title: '–†–æ–ª—å –≤–µ–Ω–¥–æ—Ä–∞', icon: Building2 },
    { id: 2, title: '–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏', icon: Search },
    { id: 3, title: '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', icon: CreditCard },
    { id: 4, title: '–ù–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', icon: FileText },
    { id: 5, title: '–î–æ–∫—É–º–µ–Ω—Ç—ã', icon: Upload }
  ]


  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const saveData = async () => {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...')
    console.log('üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', JSON.stringify(formData, null, 2))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:')
    console.log('  - –†–æ–ª—å:', formData.role)
    console.log('  - –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:', formData.companyData)
    console.log('  - –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:', formData.bankAccount)
    console.log('  - –ù–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å:', formData.taxProfile)
    console.log('  - –î–æ–∫—É–º–µ–Ω—Ç—ã:', formData.documents)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Å–µ—Ö —à–∞–≥–æ–≤
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Å–µ—Ö —à–∞–≥–æ–≤:')
    for (let i = 1; i <= 5; i++) {
      const isValid = validateStep(i)
      console.log(`  - –®–∞–≥ ${i}: ${isValid ? '‚úÖ' : '‚ùå'}`)
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ä–æ–ª—å, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
    const dataToSend = {
      ...formData,
      role: formData.role || 'NPD' // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —Ä–æ–ª—å—é:', dataToSend.role)
    
    setIsLoading(true)
    setError(null)

    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...')
      const response = await fetch('/api/vendor/upgrade-to-pro', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(dataToSend)
      })

      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:')
      console.log('  - –°—Ç–∞—Ç—É—Å:', response.status)
      console.log('  - OK:', response.ok)

      if (!response.ok) {
        const errorData = await response.json()
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorData)
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
      }

      const result = await response.json()
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result)
      setSuccess(result.message)
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        router.push('/vendor/dashboard')
      }, 2000)

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error)
      setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏')
    } finally {
      setIsLoading(false)
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
  const validateStep = (step: number): boolean => {
    console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–≥–∞ ${step}:`)
    console.log('  - –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData)
    console.log('  - –¢–µ–∫—É—â–∏–π —à–∞–≥:', step)
    
    switch (step) {
      case 1:
        // –£–±–∏—Ä–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const step1Valid = true
        console.log('–®–∞–≥ 1 (—Ä–æ–ª—å):', step1Valid, formData.role)
        console.log('  ‚ÑπÔ∏è –†–æ–ª—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
        return step1Valid
      case 2:
        // –£–±–∏—Ä–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const step2Valid = true
        console.log('–®–∞–≥ 2 (–¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏):', step2Valid, formData.companyData)
        console.log('  ‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
        return step2Valid
      case 3:
        // –£–±–∏—Ä–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const step3Valid = true
        console.log('–®–∞–≥ 3 (–±–∞–Ω–∫):', step3Valid, formData.bankAccount)
        console.log('  ‚ÑπÔ∏è –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
        return step3Valid
      case 4:
        // –£–±–∏—Ä–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const step4Valid = true
        console.log('–®–∞–≥ 4 (–Ω–∞–ª–æ–≥–∏):', step4Valid, formData.taxProfile)
        console.log('  ‚ÑπÔ∏è –ù–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
        return step4Valid
      case 5:
        // –£–±–∏—Ä–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const step5Valid = true
        console.log('–®–∞–≥ 5 (–¥–æ–∫—É–º–µ–Ω—Ç—ã):', step5Valid, { documentsCount: formData.documents.length })
        console.log('  ‚ÑπÔ∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
        return step5Valid
      default:
        return false
    }
  }

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, steps.length))
    }
  }

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1))
  }

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-unbounded-bold text-gray-900 gradient-text-primary">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –≤–µ–Ω–¥–æ—Ä–∞</h3>
            <div className="space-y-4">
              {[
                { value: 'NPD', label: '–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π (–ù–ü–î)', description: '–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ' },
                { value: 'IE', label: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å (–ò–ü)', description: '–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ' },
                { value: 'LEGAL', label: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–û–û–û/–ê–û)', description: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ' }
              ].map((option, index) => (
                <label key={option.value} className={`flex items-start space-x-3 p-4 border rounded-lg cursor-pointer hover:bg-gray-50 card-hover interactive transition-all duration-300 animate-fade-in-up`} style={{ animationDelay: `${index * 0.1}s` }}>
                  <input
                    type="radio"
                    name="role"
                    value={option.value}
                    checked={formData.role === option.value}
                    onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value as any }))}
                    className="mt-1"
                  />
                  <div>
                    <div className="font-unbounded font-medium text-gray-900">{option.label}</div>
                    <div className="text-sm text-gray-500 font-medium">{option.description}</div>
                  </div>
                </label>
              ))}
            </div>
          </div>
        )

      case 2:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-unbounded-bold text-gray-900 gradient-text-primary">–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏</h3>
            

            {/* –ü–æ–ª—è —Ñ–æ—Ä–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {formData.role === 'NPD' && (
                <>
                  <div>
                    <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–§–ò–û</label>
                    <input
                      type="text"
                      value={formData.companyData.fullName || ''}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        companyData: { ...prev.companyData, fullName: e.target.value }
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-unbounded"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–ò–ù–ù</label>
                    <INNAutocomplete
                      value={formData.companyData.inn || ''}
                      onSelect={(company) => {
                        setFormData(prev => ({
                          ...prev,
                          companyData: {
                            ...prev.companyData,
                            inn: company.inn,
                            ogrn: '', // –ù–ü–î –Ω–µ –∏–º–µ–µ—Ç –û–ì–†–ù
                            orgnip: '', // –ù–ü–î –Ω–µ –∏–º–µ–µ—Ç –û–ì–†–ù–ò–ü
                            companyName: company.name.full,
                            fullName: company.management.name,
                            directorName: company.management.name,
                            address: company.address.full
                          },
                          // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
                          bankAccount: {
                            ...prev.bankAccount,
                            inn: company.inn, // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –ò–ù–ù –∏–∑ DaData
                            holderName: company.management.name // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ä–∂–∞—Ç–µ–ª—è —Å—á–µ—Ç–∞
                          }
                        }))
                      }}
                      onClear={() => {
                        setFormData(prev => ({
                          ...prev,
                          companyData: {
                            ...prev.companyData,
                            inn: '',
                            ogrn: '',
                            orgnip: '',
                            companyName: '',
                            fullName: '',
                            directorName: '',
                            address: ''
                          }
                        }))
                      }}
                      placeholder="1234567890"
                    />
                  </div>
                </>
              )}

              {formData.role === 'IE' && (
                <>
                  <div>
                    <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–§–ò–û</label>
                    <input
                      type="text"
                      value={formData.companyData.fullName || ''}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        companyData: { ...prev.companyData, fullName: e.target.value }
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-unbounded"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–ò–ù–ù</label>
                    <INNAutocomplete
                      value={formData.companyData.inn || ''}
                      onSelect={(company) => {
                        setFormData(prev => ({
                          ...prev,
                          companyData: {
                            ...prev.companyData,
                            inn: company.inn,
                            ogrn: '', // –ò–ü –Ω–µ –∏–º–µ–µ—Ç –û–ì–†–ù
                            orgnip: company.orgnip, // –î–ª—è –ò–ü –∏—Å–ø–æ–ª—å–∑—É–µ–º –û–ì–†–ù–ò–ü
                            companyName: company.name.full,
                            fullName: company.management.name,
                            directorName: company.management.name,
                            address: company.address.full
                          },
                          // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
                          bankAccount: {
                            ...prev.bankAccount,
                            inn: company.inn, // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –ò–ù–ù –∏–∑ DaData
                            holderName: company.management.name // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ä–∂–∞—Ç–µ–ª—è —Å—á–µ—Ç–∞
                          }
                        }))
                      }}
                      onClear={() => {
                        setFormData(prev => ({
                          ...prev,
                          companyData: {
                            ...prev.companyData,
                            inn: '',
                            ogrn: '',
                            orgnip: '',
                            companyName: '',
                            fullName: '',
                            directorName: '',
                            address: ''
                          }
                        }))
                      }}
                      placeholder="1234567890"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–û–ì–†–ù–ò–ü</label>
                    <input
                      type="text"
                      value={formData.companyData.orgnip || ''}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        companyData: { ...prev.companyData, orgnip: e.target.value }
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-unbounded"
                      required
                    />
                  </div>
                </>
              )}

              {formData.role === 'LEGAL' && (
                <>
                  <div>
                    <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</label>
                    <input
                      type="text"
                      value={formData.companyData.companyName || ''}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        companyData: { ...prev.companyData, companyName: e.target.value }
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-unbounded"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–ò–ù–ù</label>
                    <INNAutocomplete
                      value={formData.companyData.inn || ''}
                      onSelect={(company) => {
                        setFormData(prev => ({
                          ...prev,
                          companyData: {
                            ...prev.companyData,
                            inn: company.inn,
                            ogrn: company.ogrn, // –î–ª—è –û–û–û –∏—Å–ø–æ–ª—å–∑—É–µ–º –û–ì–†–ù
                            orgnip: '', // –û–û–û –Ω–µ –∏–º–µ–µ—Ç –û–ì–†–ù–ò–ü
                            companyName: company.name.full,
                            fullName: company.management.name,
                            directorName: company.management.name,
                            address: company.address.full
                          },
                          // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
                          bankAccount: {
                            ...prev.bankAccount,
                            inn: company.inn, // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –ò–ù–ù –∏–∑ DaData
                            holderName: company.management.name // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ä–∂–∞—Ç–µ–ª—è —Å—á–µ—Ç–∞
                          }
                        }))
                      }}
                      onClear={() => {
                        setFormData(prev => ({
                          ...prev,
                          companyData: {
                            ...prev.companyData,
                            inn: '',
                            ogrn: '',
                            orgnip: '',
                            companyName: '',
                            fullName: '',
                            directorName: '',
                            address: ''
                          }
                        }))
                      }}
                      placeholder="1234567890"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–û–ì–†–ù</label>
                    <input
                      type="text"
                      value={formData.companyData.ogrn || ''}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        companyData: { ...prev.companyData, ogrn: e.target.value }
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-unbounded"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞</label>
                    <input
                      type="text"
                      value={formData.companyData.directorName || ''}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        companyData: { ...prev.companyData, directorName: e.target.value }
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-unbounded"
                      required
                    />
                  </div>
                </>
              )}

              <div className="md:col-span-2">
                <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–ê–¥—Ä–µ—Å</label>
                <input
                  type="text"
                  value={formData.companyData.address || ''}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    companyData: { ...prev.companyData, address: e.target.value }
                  }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-unbounded"
                />
              </div>
            </div>
          </div>
        )

      case 3:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-unbounded-bold text-gray-900 gradient-text-primary">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ä–∂–∞—Ç–µ–ª—è —Å—á–µ—Ç–∞</label>
                <input
                  type="text"
                  value={formData.bankAccount.holderName || ''}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    bankAccount: { ...prev.bankAccount, holderName: e.target.value }
                  }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-unbounded"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞</label>
                <input
                  type="text"
                  value={formData.bankAccount.bankName || ''}
                  readOnly
                  className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-700 cursor-not-allowed font-unbounded"
                  placeholder="–ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ –ë–ò–ö"
                />
                <p className="text-xs text-gray-500 mt-1">–ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ –ë–ò–ö</p>
              </div>
              <div>
                <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–ë–ò–ö</label>
                <BIKAutocomplete
                  value={formData.bankAccount.bik || ''}
                  onSelect={(bank) => {
                    setFormData(prev => ({
                      ...prev,
                      bankAccount: {
                        ...prev.bankAccount,
                        bankName: bank.fullName || bank.name,
                        bik: bank.bik,
                        corrAccount: bank.correspondentAccount
                      }
                    }))
                  }}
                  onClear={() => {
                    setFormData(prev => ({
                      ...prev,
                      bankAccount: {
                        ...prev.bankAccount,
                        bankName: '',
                        bik: '',
                        corrAccount: ''
                      }
                    }))
                  }}
                  placeholder="044525225"
                />
              </div>
              <div>
                <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç</label>
                <input
                  type="text"
                  value={formData.bankAccount.account || ''}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    bankAccount: { ...prev.bankAccount, account: e.target.value }
                  }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-unbounded"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç</label>
                <input
                  type="text"
                  value={formData.bankAccount.corrAccount || ''}
                  readOnly
                  className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-700 cursor-not-allowed font-unbounded"
                  placeholder="–ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ –ë–ò–ö"
                />
                <p className="text-xs text-gray-500 mt-1">–ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ –ë–ò–ö</p>
              </div>
            </div>
          </div>
        )

      case 4:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-unbounded-bold text-gray-900 gradient-text-primary">–ù–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–ù–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º</label>
                <select
                  value={formData.taxProfile.taxRegime || 'NPD'}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    taxProfile: { ...prev.taxProfile, taxRegime: e.target.value as any }
                  }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-unbounded"
                  required
                >
                  <option value="NPD">–ù–ü–î (–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥)</option>
                  <option value="USN">–£–°–ù (–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è)</option>
                  <option value="OSN">–û–°–ù (–û–±—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è)</option>
                  <option value="PSN">–ü–°–ù (–ü–∞—Ç–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è)</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–°—Ç–∞—Ç—É—Å –ù–î–°</label>
                <select
                  value={formData.taxProfile.vatStatus || 'NONE'}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    taxProfile: { ...prev.taxProfile, vatStatus: e.target.value as any }
                  }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-unbounded"
                  required
                >
                  <option value="NONE">–ù–µ —è–≤–ª—è–µ—Ç—Å—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–º –ù–î–°</option>
                  <option value="VAT_0">0% –ù–î–°</option>
                  <option value="VAT_5">5% –ù–î–°</option>
                  <option value="VAT_7">7% –ù–î–°</option>
                  <option value="VAT_20">20% –ù–î–°</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-unbounded font-medium text-gray-700 mb-1">–†–µ–∂–∏–º —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏</label>
                <select
                  value={formData.taxProfile.fiscalMode || 'PLATFORM'}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    taxProfile: { ...prev.taxProfile, fiscalMode: e.target.value as any }
                  }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-unbounded"
                >
                  <option value="PLATFORM">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤—ã–±–∏–≤–∞–µ—Ç —á–µ–∫ –∫–∞–∫ –∞–≥–µ–Ω—Ç</option>
                  <option value="VENDOR">–í–µ–Ω–¥–æ—Ä —Å–∞–º –≤—ã–±–∏–≤–∞–µ—Ç —á–µ–∫</option>
                </select>
              </div>
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="agencyAgreement"
                  checked={formData.taxProfile.agencyAgreement}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    taxProfile: { ...prev.taxProfile, agencyAgreement: e.target.checked }
                  }))}
                  className="rounded"
                />
                <label htmlFor="agencyAgreement" className="text-sm font-medium text-gray-700">
                  –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∞–≥–µ–Ω—Ç—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä
                </label>
              </div>
            </div>
          </div>
        )

      case 5:
        return (
          <div className="space-y-6">
            <h3 className="text-xl font-unbounded-bold text-gray-900 gradient-text-primary">–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</h3>
            
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
              <h4 className="font-unbounded font-medium text-blue-900 mb-3">–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</h4>
              <div className="space-y-2 text-sm text-blue-800">
                {formData.role === 'NPD' && (
                  <div>
                    <strong>–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π (–ù–ü–î):</strong> –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–ú–æ–π –ù–∞–ª–æ–≥"
                  </div>
                )}
                {formData.role === 'IE' && (
                  <div>
                    <strong>–ò–ü:</strong> –ò–ù–ù –∏ –ï–ì–†–ò–ü (–º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ <a href="https://egrul.nalog.ru/index.html" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:text-blue-800 underline">–§–ù–° –†–æ—Å—Å–∏–∏</a>)
                  </div>
                )}
                {formData.role === 'LEGAL' && (
                  <div>
                    <strong>–û–û–û/–ê–û:</strong> –ò–ù–ù, –û–ì–†–ù –∏ –ï–ì–†–ù (–º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ <a href="https://egrul.nalog.ru/index.html" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:text-blue-800 underline">–§–ù–° –†–æ—Å—Å–∏–∏</a>)
                  </div>
                )}
                {!formData.role && (
                  <div>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –≤–µ–Ω–¥–æ—Ä–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</div>
                )}
              </div>
            </div>

            <div className="space-y-4">
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-600 mb-2">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</p>
                <input
                  type="file"
                  multiple
                  accept=".pdf,.jpg,.jpeg,.png"
                  onChange={(e) => {
                    const files = Array.from(e.target.files || [])
                    setFormData(prev => ({ ...prev, documents: files }))
                  }}
                  className="hidden"
                  id="document-upload"
                />
                <label
                  htmlFor="document-upload"
                  className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 cursor-pointer"
                >
                  –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã
                </label>
              </div>
              
              {formData.documents.length > 0 && (
                <div className="space-y-2">
                  <h4 className="font-medium text-gray-900">–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</h4>
                  {formData.documents.map((file, index) => (
                    <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                      <span className="text-sm text-gray-700">{file.name}</span>
                      <button
                        type="button"
                        onClick={() => {
                          setFormData(prev => ({
                            ...prev,
                            documents: prev.documents.filter((_, i) => i !== index)
                          }))
                        }}
                        className="text-red-600 hover:text-red-800"
                      >
                        <XCircle className="w-4 h-4" />
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )

      default:
        return null
    }
  }

  if (success) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-8 text-center">
          <CheckCircle className="w-16 h-16 text-green-600 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">–£—Å–ø–µ—à–Ω–æ!</h2>
          <p className="text-gray-600 mb-6">{success}</p>
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          <p className="text-sm text-gray-500 mt-2">–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="max-w-4xl mx-auto py-8 px-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8 animate-fade-in-up">
          <h1 className="text-3xl font-unbounded-bold text-gray-900 mb-2 gradient-text-primary">–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Vendor Pro</h1>
          <p className="text-gray-600 font-medium">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ PRO</p>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
        <div className="mb-8 animate-slide-in-left">
          <div className="flex items-center justify-center mb-4">
            <div className="flex items-center space-x-8">
              {steps.map((step, index) => {
                const Icon = step.icon
                const isActive = currentStep === step.id
                const isCompleted = currentStep > step.id
                
                return (
                  <div key={step.id} className="flex items-center">
                    <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 transition-all duration-300 ${
                      isCompleted 
                        ? 'bg-green-600 border-green-600 text-white animate-scale-in' 
                        : isActive 
                          ? 'bg-blue-600 border-blue-600 text-white animate-pulse-slow' 
                          : 'bg-white border-gray-300 text-gray-500'
                    }`}>
                      {isCompleted ? (
                        <CheckCircle className="w-5 h-5 animate-bounce" />
                      ) : (
                        <Icon className="w-5 h-5" />
                      )}
                    </div>
                    <div className="ml-3">
                      <div className={`text-sm font-unbounded font-medium transition-colors duration-300 ${
                        isActive ? 'text-blue-600' : isCompleted ? 'text-green-600' : 'text-gray-500'
                      }`}>
                        {step.title}
                      </div>
                    </div>
                    {index < steps.length - 1 && (
                      <div className={`w-16 h-0.5 mx-4 transition-colors duration-300 ${
                        isCompleted ? 'bg-green-600' : 'bg-gray-300'
                      }`} />
                    )}
                  </div>
                )
              })}
            </div>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="bg-white rounded-lg shadow-lg p-8 card-hover animate-scale-in">
          {error && (
            <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg animate-wiggle">
              <div className="flex items-center">
                <XCircle className="w-5 h-5 text-red-600 mr-2" />
                <span className="text-red-800 font-medium">{error}</span>
              </div>
            </div>
          )}

          <div className="animate-fade-in-up">
            {renderStep()}
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
          <div className="flex justify-between mt-8 animate-slide-in-right">
            <button
              type="button"
              onClick={prevStep}
              disabled={currentStep === 1}
              className="flex items-center px-4 py-2 text-gray-600 bg-gray-100 rounded-md hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed btn-hover interactive transition-all duration-300"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              <span className="font-unbounded font-medium">–ù–∞–∑–∞–¥</span>
            </button>

            {currentStep < steps.length ? (
              <button
                type="button"
                onClick={nextStep}
                disabled={!validateStep(currentStep)}
                className="flex items-center px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed btn-dynamic interactive transition-all duration-300"
              >
                <span className="font-unbounded font-medium">–î–∞–ª–µ–µ</span>
                <ArrowRight className="w-4 h-4 ml-2" />
              </button>
            ) : (
              <button
                type="button"
                onClick={() => {
                  console.log('üñ±Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"')
                  console.log('üìä –¢–µ–∫—É—â–∏–π —à–∞–≥:', currentStep)
                  console.log('üìä –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–≥–∞:', validateStep(currentStep))
                  console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞:', isLoading)
                  saveData()
                }}
                disabled={isLoading || !validateStep(currentStep)}
                className="flex items-center px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed btn-success interactive transition-all duration-300"
              >
                {isLoading ? (
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                ) : (
                  <CheckCircle className="w-4 h-4 mr-2" />
                )}
                <span className="font-unbounded font-medium">{isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å'}</span>
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
