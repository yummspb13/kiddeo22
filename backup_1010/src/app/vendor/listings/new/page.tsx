import { redirect } from 'next/navigation'
import { getServerSession } from "@/lib/auth-utils"
import { prisma } from '@/lib/db'
import { cookies } from 'next/headers'
import { Unbounded } from 'next/font/google'

const unbounded = Unbounded({ 
  subsets: ['cyrillic', 'latin'],
  variable: '--font-unbounded',
  weight: ['300', '400', '500', '600', '700', '800', '900']
})

export default async function NewListingPage() {
  console.log('üîç NEW LISTING PAGE: Starting page load')
  
  // –ü–æ–ª—É—á–∞–µ–º cookies –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
  const cookieStore = await cookies()
  const sessionCookie = cookieStore.get('session')
  
  let session = null
  if (sessionCookie) {
    try {
      console.log('üîç NEW LISTING PAGE: Session cookie found, calling getServerSession...')
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π NextRequest –¥–ª—è getServerSession
      const mockRequest = {
        cookies: {
          get: (name: string) => cookieStore.get(name)
        }
      } as any
      
      session = await getServerSession(mockRequest)
      console.log('üîç NEW LISTING PAGE: getServerSession result:', session)
    } catch (error) {
      console.log('üîç NEW LISTING PAGE: getServerSession error:', error)
      session = null
    }
  } else {
    console.log('üîç NEW LISTING PAGE: No session cookie found')
  }
  
  console.log('üîç NEW LISTING PAGE: Session check', { hasSession: !!session, userId: session?.user?.id })
  
  if (!session?.user?.id) {
    console.log('üîç NEW LISTING PAGE: No session, redirecting to login')
    redirect('/?login=true')
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–µ–Ω–¥–æ—Ä–æ–º
  const vendor = await prisma.vendor.findUnique({
    where: { userId: parseInt(session.user.id) }
  })

  if (!vendor) {
    redirect('/vendor/onboarding')
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –º–µ—Å—Ç
  const subcategories = await prisma.venueSubcategory.findMany({
    where: { isActive: true },
    include: {
      category: {
        select: {
          id: true,
          name: true
        }
      }
    },
    orderBy: [
      { category: { name: 'asc' } },
      { name: 'asc' }
    ]
  })

  // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞
  const cities = await prisma.city.findMany({
    where: { isPublic: true },
    select: {
      id: true,
      name: true,
      slug: true
    },
    orderBy: { name: 'asc' }
  })

  return (
    <div className={`min-h-screen bg-gray-50 font-unbounded ${unbounded.variable}`}>
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-white rounded-lg shadow-sm p-8">
          <div className="text-center">
            <h1 className="text-3xl font-bold text-gray-900 mb-4 font-unbounded">
              –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
            </h1>
            <p className="text-lg text-gray-600 mb-8 font-unbounded">
              –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å
            </p>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-2xl mx-auto">
              {/* –ú–µ—Å—Ç–æ */}
              <a
                href="/vendor/venues/create"
                className="group relative bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-8 border-2 border-blue-200 hover:border-blue-300 transition-all duration-200 hover:shadow-lg"
              >
                <div className="text-center">
                  <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200">
                    <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                    </svg>
                  </div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-2 font-unbounded">
                    –ú–µ—Å—Ç–æ
                  </h3>
                  <p className="text-gray-600 mb-4 font-unbounded">
                    –ü–∞—Ä–∫–∏, –º—É–∑–µ–∏, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã
                  </p>
                  <div className="text-sm text-blue-600 font-medium font-unbounded">
                    –°–æ–∑–¥–∞—Ç—å –º–µ—Å—Ç–æ ‚Üí
                  </div>
                </div>
              </a>

              {/* –£—Å–ª—É–≥–∞ */}
              <a
                href="/vendor/services/create"
                className="group relative bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-8 border-2 border-green-200 hover:border-green-300 transition-all duration-200 hover:shadow-lg"
              >
                <div className="text-center">
                  <div className="w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200">
                    <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-2 font-unbounded">
                    –£—Å–ª—É–≥–∞
                  </h3>
                  <p className="text-gray-600 mb-4 font-unbounded">
                    –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                  </p>
                  <div className="text-sm text-green-600 font-medium font-unbounded">
                    –°–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É ‚Üí
                  </div>
                </div>
              </a>
            </div>

            <div className="mt-8 text-sm text-gray-500">
              <p>–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Å—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
