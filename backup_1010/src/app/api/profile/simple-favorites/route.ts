import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { getFavorites, addFavorite } from '@/lib/favorites-persistent'

// GET - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
export async function GET(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const userId = request.headers.get('x-user-id')
    
    if (!userId) {
      return NextResponse.json({ error: 'User ID required' }, { status: 400 })
    }

    console.log('üîç GET /api/profile/simple-favorites - UserId:', userId)

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const favorites = getFavorites(parseInt(userId))

    return NextResponse.json({ favorites })
  } catch (error) {
    console.error('Error fetching favorites:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// POST - –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
export async function POST(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const userId = request.headers.get('x-user-id')
    
    if (!userId) {
      return NextResponse.json({ error: 'User ID required' }, { status: 400 })
    }

    const { itemId, itemType, title, description, image, price, currency, location, date } = await request.json()

    if (!itemId || !itemType) {
      return NextResponse.json({ 
        error: 'Item ID and type are required' 
      }, { status: 400 })
    }

    console.log('üîç POST /api/profile/simple-favorites - UserId:', userId, 'Data:', { itemId, itemType, title })

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    const favorite = {
      id: `fav_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      itemId,
      itemType,
      title: title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      description: description || null,
      image: image || null,
      price: price || null,
      currency: currency || 'RUB',
      location: location || null,
      date: date || null,
      userId: parseInt(userId),
      createdAt: new Date().toISOString()
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    addFavorite(parseInt(userId), favorite)

    return NextResponse.json({ favorite })
  } catch (error) {
    console.error('Error adding to favorites:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
