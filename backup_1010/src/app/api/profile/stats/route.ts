import { NextRequest, NextResponse } from 'next/server'
import { getToken } from "@/lib/auth-utils"
import { prisma } from '@/lib/db'

export async function GET(request: NextRequest) {
  try {
    const token = await getToken(request)
    
    console.log('üîç GET /api/profile/stats - Token:', {
      hasToken: !!token,
      userId: token?.sub,
      userEmail: token?.email
    })
    
    if (!token?.sub) {
      console.log('‚ùå Unauthorized: No token or user ID')
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const userId = token.sub

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [
      childrenCount,
      ordersCount,
      favoritesCount,
      reviewsCount
    ] = await Promise.all([
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π
      prisma.userChild.count({
        where: { userId: parseInt(userId) }
      }),
      
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
      prisma.order.count({
        where: { userId: parseInt(userId) }
      }),
      
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      prisma.userFavorite.count({
        where: { userId: parseInt(userId) }
      }),
      
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
      prisma.userReview.count({
        where: { userId: parseInt(userId) }
      })
    ])

    return NextResponse.json({
      childrenCount,
      ordersCount,
      favoritesCount,
      reviewsCount
    })
  } catch (error) {
    console.error('Error fetching profile stats:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
