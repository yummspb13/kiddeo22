import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from '@/lib/auth-server'
import { authOptions } from '@/auth'
import { prisma } from '@/lib/db'
import { writeFile, mkdir } from 'fs/promises'
import { join } from 'path'
import { v4 as uuidv4 } from 'uuid'
import { ApiError, handleApiError, safeExecute } from '@/lib/error-handler'

export async function POST(request: NextRequest) {
  try {
    console.log('üì∏ Upload avatar - Starting request')
    
    const session = await getServerSession(request)
    console.log('üì∏ Upload avatar - Session:', !!session)
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º uid –≤–º–µ—Å—Ç–æ id
    const userId = session?.user?.id || (session?.user as any)?.id
    console.log('üì∏ Upload avatar - User ID:', userId)
    
    if (!userId) {
      throw new ApiError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 401)
    }

    const formData = await request.formData()
    const file = formData.get('file') as File
    
    if (!file) {
      throw new ApiError('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 400)
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    const maxSize = 5 * 1024 * 1024 // 5MB
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp']
    
    if (file.size > maxSize) {
      throw new ApiError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB', 400)
    }

    if (!allowedTypes.includes(file.type)) {
      throw new ApiError('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã: JPG, PNG, GIF, WebP', 400)
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const fileExtension = file.name.split('.').pop()
    if (!fileExtension) {
      throw new ApiError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞', 400)
    }
    
    const fileName = `${uuidv4()}.${fileExtension}`
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const uploadDir = join(process.cwd(), 'public', 'uploads', 'avatars')
    await safeExecute(
      () => mkdir(uploadDir, { recursive: true }),
      undefined,
      'Creating upload directory'
    )
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const filePath = join(uploadDir, fileName)
    const bytes = await file.arrayBuffer()
    const buffer = Buffer.from(bytes)
    
    await safeExecute(
      () => writeFile(filePath, buffer),
      undefined,
      'Writing file to disk'
    )
    
    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
    const imageUrl = `/uploads/avatars/${fileName}`
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updatedUser = await safeExecute(
      () => prisma.user.update({
        where: { id: parseInt(String(userId)) },
        data: { image: imageUrl }
      }),
      null,
      'Updating user avatar in database'
    )
    
    if (!updatedUser) {
      throw new ApiError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 500)
    }
    
    console.log('‚úÖ Upload avatar - Success:', imageUrl)

    return NextResponse.json({ 
      success: true,
      message: '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
      imageUrl 
    })
  } catch (error) {
    const errorResponse = handleApiError(error, 'Upload Avatar')
    console.error('‚ùå Upload avatar error:', errorResponse)
    
    return NextResponse.json(errorResponse, { 
      status: errorResponse.statusCode || 500 
    })
  }
}
