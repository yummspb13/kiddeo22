import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'

// POST - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –æ—Ç–∑—ã–≤
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ reviewId: string }> }
) {
  try {
    const reviewId = (await params).reviewId
    const { type } = await request.json()
    
    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const userId = request.headers.get('x-user-id')
    
    if (!userId) {
      return NextResponse.json({ error: 'User ID required' }, { status: 400 })
    }

    const userIdInt = parseInt(userId)
    if (isNaN(userIdInt)) {
      return NextResponse.json({ error: 'Invalid User ID' }, { status: 400 })
    }

    if (!type || !['LIKE', 'DISLIKE'].includes(type)) {
      return NextResponse.json({ error: 'Type must be LIKE or DISLIKE' }, { status: 400 })
    }

    console.log('üîç POST /api/reviews/[reviewId]/reactions - ReviewId:', reviewId, 'UserId:', userIdInt, 'Type:', type)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ä–µ–∞–∫—Ü–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingReaction = await prisma.reviewReaction.findFirst({
      where: {
        reviewId: reviewId,
        userId: userIdInt
      }
    })

    if (existingReaction) {
      // –ï—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
      const updatedReaction = await prisma.reviewReaction.update({
        where: {
          id: existingReaction.id
        },
        data: {
          type: type
        }
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      await updateReactionCounts(reviewId)

      return NextResponse.json({ reaction: updatedReaction })
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é
      const reaction = await prisma.reviewReaction.create({
        data: {
          reviewId: reviewId,
          userId: userIdInt,
          type: type as 'LIKE' | 'DISLIKE'
        }
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      await updateReactionCounts(reviewId)

      return NextResponse.json({ reaction })
    }
  } catch (error) {
    console.error('Error creating reaction:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// DELETE - —É–¥–∞–ª–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ reviewId: string }> }
) {
  try {
    const reviewId = (await params).reviewId
    
    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const userId = request.headers.get('x-user-id')
    
    if (!userId) {
      return NextResponse.json({ error: 'User ID required' }, { status: 400 })
    }

    const userIdInt = parseInt(userId)
    if (isNaN(userIdInt)) {
      return NextResponse.json({ error: 'Invalid User ID' }, { status: 400 })
    }

    console.log('üîç DELETE /api/reviews/[reviewId]/reactions - ReviewId:', reviewId, 'UserId:', userIdInt)

    // –£–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
    await prisma.reviewReaction.deleteMany({
      where: {
        reviewId: reviewId,
        userId: userIdInt
      }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    await updateReactionCounts(reviewId)

    return NextResponse.json({ message: 'Reaction removed' })
  } catch (error) {
    console.error('Error removing reaction:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ä–µ–∞–∫—Ü–∏–π
async function updateReactionCounts(reviewId: string) {
  const likesCount = await prisma.reviewReaction.count({
    where: {
      reviewId: reviewId,
      type: 'LIKE'
    }
  })

  const dislikesCount = await prisma.reviewReaction.count({
    where: {
      reviewId: reviewId,
      type: 'DISLIKE'
    }
  })

  await prisma.eventReview.update({
    where: {
      id: reviewId
    },
    data: {
      likesCount: likesCount,
      dislikesCount: dislikesCount
    }
  })
}
