import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'

export async function POST(request: NextRequest) {
  try {
    console.log('üîç VENUE REVIEW REPLIES API: Starting request')
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const { reviewId, message } = await request.json()
    console.log('üîç VENUE REVIEW REPLIES API: Data:', { reviewId, message })

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const userId = '1'

    if (!reviewId || !message?.trim()) {
      return NextResponse.json({ error: 'Review ID and message are required' }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–∑—ã–≤
    const review = await prisma.venueReview.findUnique({
      where: { id: reviewId }
    })

    if (!review) {
      return NextResponse.json({ error: 'Review not found' }, { status: 404 })
    }

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
    const reply = await prisma.venueReviewReply.create({
      data: {
        reviewId,
        userId: parseInt(userId),
        message: message.trim(),
        status: 'APPROVED' // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã
      },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            image: true
          }
        }
      }
    })

    return NextResponse.json({ 
      success: true, 
      reply 
    })
  } catch (error) {
    console.error('Error creating venue review reply:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
