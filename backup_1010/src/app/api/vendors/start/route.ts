import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from '@/lib/auth-server'
import { authOptions } from '@/auth'
import { prisma } from '@/lib/db'
import { sendEmail, emailTemplates } from '@/lib/email'
import { createModerationHistory } from '@/lib/vendor-moderation-history'

// POST /api/vendors/start - —Å–æ–∑–¥–∞—Ç—å Vendor Start
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(request)
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    console.log('üîç VENDOR START API: Request body:', body)
    
    const {
      displayName,
      cityId,
      description,
      phone,
      email,
      website,
      supportEmail,
      supportPhone,
      brandSlug,
      // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞
      proofType,
      proofData,
      additionalProofData,
      // –°–æ–≥–ª–∞—Å–∏—è
      agreements
    } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!displayName || !cityId || !proofType || !proofData) {
      return NextResponse.json({ 
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: displayName, cityId, proofType, proofData' 
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–µ–Ω–¥–æ—Ä–æ–º
    const existingVendor = await prisma.vendor.findUnique({
      where: { userId: parseInt(session.user.id) }
    })

    if (existingVendor) {
      return NextResponse.json({ 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –≤–µ–Ω–¥–æ—Ä' 
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å brandSlug
    if (brandSlug) {
      const existingSlug = await prisma.vendor.findUnique({
        where: { brandSlug }
      })
      
      if (existingSlug) {
        return NextResponse.json({ 
          error: '–¢–∞–∫–æ–π slug —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' 
        }, { status: 400 })
      }
    }

    // –°–æ–∑–¥–∞–µ–º –≤–µ–Ω–¥–æ—Ä–∞
    console.log('üîç VENDOR START API: Creating vendor with data:', {
      userId: parseInt(session.user.id),
      displayName,
      cityId: parseInt(cityId),
      proofType,
      proofData
    })
    
    const vendor = await prisma.vendor.create({
      data: {
        userId: parseInt(session.user.id),
        displayName,
        cityId: parseInt(cityId),
        description,
        phone,
        email,
        website,
        supportEmail,
        supportPhone,
        brandSlug,
        type: 'START',
        kycStatus: 'SUBMITTED', // –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        payoutEnabled: false,
        officialPartner: false,
        subscriptionStatus: 'INACTIVE',
        canPostEvents: false, // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
        canPostCatalog: false, // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞
        proofType,
        proofData,
        additionalProofData,
        agreements
      }
    })
    
    console.log('üîç VENDOR START API: Vendor created:', vendor.id)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å nodemailer
    /*
    try {
      const emailResult = await sendEmail(emailTemplates.vendorSubmitted(vendor.displayName, vendor.email || session.user.email || ''))
      if (emailResult.success) {
        console.log('üîç VENDOR START API: Email notification sent')
      } else {
        console.error('üîç VENDOR START API: Failed to send email:', emailResult.error)
      }
    } catch (emailError) {
      console.error('üîç VENDOR START API: Email error:', emailError)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–Ω–¥–æ—Ä–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ email
    }
    */

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–æ–ª–∏ (–ø–æ–∫–∞ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    await prisma.vendorRole.create({
      data: {
        vendorId: vendor.id,
        role: 'NPD', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π
        fullName: session.user.name || '',
        representativeName: session.user.name || '',
        isRepresentative: true
      }
    })

    // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    await prisma.document.create({
      data: {
        vendorId: vendor.id,
        docType: 'OTHER', // –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        fileUrl: proofData, // –ò–º—è —Ñ–∞–π–ª–∞
        fileName: proofData,
        fileSize: 0, // –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ)
        status: 'PENDING' // –°—Ç–∞—Ç—É—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      }
    })

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    await prisma.vendorOnboarding.create({
      data: {
        vendorId: vendor.id,
        step: 2, // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –æ–∂–∏–¥–∞–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        completedSteps: [1], // –®–∞–≥ 1 (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏) –∑–∞–≤–µ—Ä—à–µ–Ω
        isCompleted: false,
        updatedAt: new Date()
      }
    })

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–π
    try {
      await createModerationHistory({
        vendorId: vendor.id,
        action: 'SUBMITTED',
        previousStatus: 'DRAFT',
        newStatus: 'SUBMITTED',
        documentsCount: 1,
        documentsList: [{
          fileName: proofData,
          fileUrl: proofData,
          docType: 'OTHER'
        }],
        ipAddress: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown',
        userAgent: request.headers.get('user-agent') || 'unknown'
      })
    } catch (historyError) {
      console.error('üîç VENDOR START API: Error creating moderation history:', historyError)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–Ω–¥–æ—Ä–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    }

    // –°–æ–∑–¥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    const freePlan = await prisma.vendorTariffPlan.findFirst({
      where: { tariff: 'FREE' }
    })

    if (freePlan) {
      await prisma.vendorSubscription.create({
        data: {
          vendorId: vendor.id,
          tariffPlanId: freePlan.id,
          status: 'PAID',
          startsAt: new Date(),
          autoRenew: true
        } as any
      })
    }

    return NextResponse.json({ 
      success: true, 
      vendor: {
        id: vendor.id,
        displayName: vendor.displayName,
        type: vendor.type,
        kycStatus: vendor.kycStatus,
        brandSlug: vendor.brandSlug
      }
    })

  } catch (error) {
    console.error('Error creating vendor start:', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// GET /api/vendors/start - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Vendor Start
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(request)
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const vendor = await prisma.vendor.findUnique({
      where: { userId: parseInt(session.user.id) },
      include: {
        vendorRole: true,
        city: true,
        VendorOnboarding: true
      }
    })

    if (!vendor) {
      return NextResponse.json({ error: 'Vendor not found' }, { status: 404 })
    }

    return NextResponse.json({ vendor })

  } catch (error) {
    console.error('Error fetching vendor start:', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
