import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from '@/lib/auth-server'
import { prisma } from '@/lib/db'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.uid) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const userId = session.user.uid
    const body = await request.json()
    
    console.log('üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ PRO:', JSON.stringify(body, null, 2))
    console.log('üîç –î–µ—Ç–∞–ª–∏ –¥–∞–Ω–Ω—ã—Ö:')
    console.log('  - –†–æ–ª—å:', body.role)
    console.log('  - –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:', body.companyData)
    console.log('  - –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:', body.bankAccount)
    console.log('  - –ù–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å:', body.taxProfile)
    console.log('  - –î–æ–∫—É–º–µ–Ω—Ç—ã:', body.documents)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π:')
    if (body.role) {
      console.log('  ‚úÖ –†–æ–ª—å:', body.role)
    } else {
      console.log('  ‚ùå –†–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
    }
    
    if (body.companyData) {
      console.log('  ‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:', body.companyData)
      if (body.companyData.fullName) console.log('    ‚úÖ –§–ò–û:', body.companyData.fullName)
      if (body.companyData.inn) console.log('    ‚úÖ –ò–ù–ù:', body.companyData.inn)
      if (body.companyData.orgnip) console.log('    ‚úÖ –û–ì–†–ù–ò–ü:', body.companyData.orgnip)
    } else {
      console.log('  ‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã')
    }
    
    if (body.bankAccount) {
      console.log('  ‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:', body.bankAccount)
    } else {
      console.log('  ‚ùå –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã')
    }
    
    if (body.taxProfile) {
      console.log('  ‚úÖ –ù–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å:', body.taxProfile)
    } else {
      console.log('  ‚ùå –ù–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω')
    }
    
    if (body.documents && body.documents.length > 0) {
      console.log('  ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã:', body.documents.length)
    } else {
      console.log('  ‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –≤–µ–Ω–¥–æ—Ä–∞
    const vendor = await prisma.vendor.findFirst({
      where: { userId },
      include: {
        vendorRole: true,
        VendorOnboarding: true
      }
    })

    if (!vendor) {
      return NextResponse.json({ error: 'Vendor not found' }, { status: 404 })
    }

    if (vendor.type === 'PRO') {
      return NextResponse.json({ error: 'Already PRO vendor' }, { status: 400 })
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    await saveFormData(vendor.id, body)

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ PRO
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ PRO...')
    const readinessCheck = await checkProReadiness(vendor.id)
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:')
    console.log('  - –ì–æ—Ç–æ–≤:', readinessCheck.isReady)
    console.log('  - –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è:', readinessCheck.missingFields)
    
    if (!readinessCheck.isReady) {
      console.log('‚ùå –í–µ–Ω–¥–æ—Ä –ù–ï –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ PRO')
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è:', readinessCheck.missingFields)
      
      return NextResponse.json({ 
        error: 'Not ready for PRO upgrade',
        details: readinessCheck.missingFields,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ PRO'
      }, { status: 400 })
    }
    
    console.log('‚úÖ –í–µ–Ω–¥–æ—Ä –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ PRO!')

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –≤–µ–Ω–¥–æ—Ä–∞ –Ω–∞ PRO
    const updatedVendor = await prisma.vendor.update({
      where: { id: vendor.id },
      data: {
        type: 'PRO',
        kycStatus: 'SUBMITTED', // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ PRO –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–π—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        canPostEvents: false,
        canPostCatalog: false
      }
    })

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ –∞—É–¥–∏—Ç–∞
    await prisma.auditLog.create({
      data: {
        entityType: 'VENDOR',
        entityId: vendor.id.toString(),
        action: 'UPGRADE_TO_PRO',
        details: {
          reason: '–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ PRO —Ç–∞—Ä–∏—Ñ',
          previousType: 'START',
          newType: 'PRO',
          vendorId: vendor.id,
          previousStatus: vendor.kycStatus,
          newStatus: 'SUBMITTED'
        },
        userId: userId,
        ipAddress: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || '127.0.0.1'
      }
    })

    return NextResponse.json({
      success: true,
      vendor: updatedVendor,
      message: '–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ Vendor Pro! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é.'
    })

  } catch (error) {
    console.error('Error upgrading to PRO:', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ PRO
async function checkProReadiness(vendorId: number) {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤–µ–Ω–¥–æ—Ä–∞:', vendorId)
  const missingFields = []
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º VendorRole
  const vendorRole = await prisma.vendorRole.findUnique({
    where: { vendorId }
  })
  
  console.log('üìä VendorRole:', vendorRole)
  
  if (!vendorRole) {
    console.log('‚ùå VendorRole –Ω–µ –Ω–∞–π–¥–µ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è')
    missingFields.push('–†–æ–ª—å –≤–µ–Ω–¥–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
  } else {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –¥–ª—è —Ä–æ–ª–∏:', vendorRole.role)
    if (vendorRole.role === 'NPD') {
      console.log('  - –§–ò–û –¥–ª—è –ù–ü–î:', vendorRole.fullName || '–ù–ï–¢')
      console.log('  - –ò–ù–ù –¥–ª—è –ù–ü–î:', vendorRole.inn || '–ù–ï–¢')
      if (!vendorRole.fullName) {
        console.log('  ‚ùå –§–ò–û –¥–ª—è –ù–ü–î –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        missingFields.push('–§–ò–û –¥–ª—è –ù–ü–î')
      }
      if (!vendorRole.inn) {
        console.log('  ‚ùå –ò–ù–ù –¥–ª—è –ù–ü–î –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        missingFields.push('–ò–ù–ù –¥–ª—è –ù–ü–î')
      }
    } else if (vendorRole.role === 'IE') {
      console.log('  - –§–ò–û –¥–ª—è –ò–ü:', vendorRole.fullName || '–ù–ï–¢')
      console.log('  - –ò–ù–ù –¥–ª—è –ò–ü:', vendorRole.inn || '–ù–ï–¢')
      console.log('  - –û–ì–†–ù–ò–ü –¥–ª—è –ò–ü:', vendorRole.orgnip || '–ù–ï–¢')
      if (!vendorRole.fullName) {
        console.log('  ‚ùå –§–ò–û –¥–ª—è –ò–ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        missingFields.push('–§–ò–û –¥–ª—è –ò–ü')
      }
      if (!vendorRole.inn) {
        console.log('  ‚ùå –ò–ù–ù –¥–ª—è –ò–ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        missingFields.push('–ò–ù–ù –¥–ª—è –ò–ü')
      }
      if (!vendorRole.orgnip) {
        console.log('  ‚ùå –û–ì–†–ù–ò–ü –¥–ª—è –ò–ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        missingFields.push('–û–ì–†–ù–ò–ü –¥–ª—è –ò–ü')
      }
    } else if (vendorRole.role === 'LEGAL') {
      console.log('  - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:', vendorRole.companyName || '–ù–ï–¢')
      console.log('  - –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:', vendorRole.inn || '–ù–ï–¢')
      console.log('  - –û–ì–†–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:', vendorRole.orgn || '–ù–ï–¢')
      console.log('  - –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:', vendorRole.directorName || '–ù–ï–¢')
      if (!vendorRole.companyName) {
        console.log('  ‚ùå –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        missingFields.push('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
      }
      if (!vendorRole.inn) {
        console.log('  ‚ùå –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        missingFields.push('–ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
      }
      if (!vendorRole.orgn) {
        console.log('  ‚ùå –û–ì–†–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        missingFields.push('–û–ì–†–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
      }
      if (!vendorRole.directorName) {
        console.log('  ‚ùå –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        missingFields.push('–§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞')
      }
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø)
  const bankAccount = await prisma.bankAccount.findFirst({
    where: { vendorId }
  })
  
  console.log('üìä BankAccount:', bankAccount)
  console.log('‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –û–¢–ö–õ–Æ–ß–ï–ù–ê –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
  
  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –ë–ê–ù–ö–û–í–°–ö–ò–• –†–ï–ö–í–ò–ó–ò–¢–û–í
  // if (!bankAccount) {
  //   console.log('‚ùå BankAccount –Ω–µ –Ω–∞–π–¥–µ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è')
  //   missingFields.push('–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã')
  // } else {
  //   console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è BankAccount:')
  //   if (!bankAccount.holderName) {
  //     console.log('  ‚ùå –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ä–∂–∞—Ç–µ–ª—è —Å—á–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
  //     missingFields.push('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ä–∂–∞—Ç–µ–ª—è —Å—á–µ—Ç–∞')
  //   }
  //   if (!bankAccount.bankName) {
  //     console.log('  ‚ùå –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
  //     missingFields.push('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞')
  //   }
  //   if (!bankAccount.bik) {
  //     console.log('  ‚ùå –ë–ò–ö –±–∞–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
  //     missingFields.push('–ë–ò–ö –±–∞–Ω–∫–∞')
  //   }
  //   if (!bankAccount.account) {
  //     console.log('  ‚ùå –†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
  //     missingFields.push('–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç')
  //   }
  // }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
  const taxProfile = await prisma.taxProfile.findFirst({
    where: { vendorId }
  })
  
  console.log('üìä TaxProfile:', taxProfile)
  
  if (!taxProfile) {
    console.log('‚ùå TaxProfile –Ω–µ –Ω–∞–π–¥–µ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è')
    missingFields.push('–ù–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å')
  } else {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è TaxProfile:')
    if (!taxProfile.taxRegime) {
      console.log('  ‚ùå –ù–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
      missingFields.push('–ù–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º')
    }
    if (!taxProfile.vatStatus) {
      console.log('  ‚ùå –°—Ç–∞—Ç—É—Å –ù–î–° –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
      missingFields.push('–°—Ç–∞—Ç—É—Å –ù–î–°')
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (–í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø)
  const documents = await prisma.document.findMany({
    where: { vendorId }
  })
  
  console.log('üìä Documents:', documents.length)
  console.log('‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –û–¢–ö–õ–Æ–ß–ï–ù–ê –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
  
  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –î–û–ö–£–ú–ï–ù–¢–û–í
  // if (documents.length === 0) {
  //   console.log('‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è')
  //   missingFields.push('–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏')
  // }
  
  console.log('üìã –ò–¢–û–ì–û –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π:', missingFields.length)
  console.log('üìã –°–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π:', missingFields)
  
  return {
    isReady: missingFields.length === 0,
    missingFields
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
async function saveFormData(vendorId: number, formData: unknown) {
  try {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è –≤–µ–Ω–¥–æ—Ä–∞:', vendorId)
    console.log('üìä –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', JSON.stringify(formData, null, 2))
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º VendorRole
    if ((formData as any).role || (formData as any).companyData) {
      const vendorRoleData: any = {}
      
      if ((formData as any).role) {
        vendorRoleData.role = (formData as any).role
      }
      
      if ((formData as any).companyData) {
        const cd = (formData as any).companyData as any
        if (cd.inn) vendorRoleData.inn = cd.inn
        if (cd.ogrn) vendorRoleData.orgn = cd.ogrn
        if (cd.orgnip) vendorRoleData.orgnip = cd.orgnip
        if (cd.companyName) vendorRoleData.companyName = cd.companyName
        if (cd.fullName) vendorRoleData.fullName = cd.fullName
        if (cd.directorName) vendorRoleData.directorName = cd.directorName
        if (cd.address) vendorRoleData.address = cd.address
      }

      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º VendorRole:', vendorRoleData)
      await prisma.vendorRole.upsert({
        where: { vendorId },
        update: vendorRoleData,
        create: {
          vendorId,
          role: (formData as any).role || 'NPD',
          ...vendorRoleData
        }
      })
      console.log('‚úÖ VendorRole —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º BankAccount
    if ((formData as any).bankAccount) {
      const ba = (formData as any).bankAccount
      // –ü–æ–ª—É—á–∞–µ–º –ò–ù–ù –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏
      const companyInn = (formData as any).companyData?.inn || ''
      
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º BankAccount:', { holderName: ba.holderName, inn: companyInn, bankName: ba.bankName, bik: ba.bik, account: ba.account })
      await prisma.bankAccount.upsert({
        where: { vendorId },
        update: {
          holderName: ba.holderName,
          inn: companyInn, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ù–ù –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏
          bankName: ba.bankName,
          bik: ba.bik,
          account: ba.account,
          corrAccount: ba.corrAccount
        },
        create: {
          vendorId,
          holderName: ba.holderName,
          inn: companyInn, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ù–ù –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏
          bankName: ba.bankName,
          bik: ba.bik,
          account: ba.account,
          corrAccount: ba.corrAccount
        }
      })
      console.log('‚úÖ BankAccount —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º TaxProfile
    if ((formData as any).taxProfile) {
      const tp = (formData as any).taxProfile
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º TaxProfile:', { taxRegime: tp.taxRegime, vatStatus: tp.vatStatus, isVatPayer: tp.isVatPayer, fiscalMode: tp.fiscalMode })
      await prisma.taxProfile.upsert({
        where: { vendorId },
        update: {
          taxRegime: tp.taxRegime,
          vatStatus: tp.vatStatus,
          vatRate: tp.vatRate,
          isVatPayer: tp.isVatPayer,
          fiscalMode: tp.fiscalMode,
          agencyAgreement: tp.agencyAgreement
        },
        create: {
          vendorId,
          taxRegime: tp.taxRegime,
          vatStatus: tp.vatStatus,
          vatRate: tp.vatRate,
          isVatPayer: tp.isVatPayer,
          fiscalMode: tp.fiscalMode,
          agencyAgreement: tp.agencyAgreement
        }
      })
      console.log('‚úÖ TaxProfile —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
    }

    // TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    // if (formData.documents && formData.documents.length > 0) {
    //   // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π Document
    // }

  } catch (error) {
    console.error('Error saving form data:', error)
    throw error
  }
}
