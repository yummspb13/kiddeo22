import { notFound } from 'next/navigation';
import { prisma } from '@/lib/db';
import VenueCategoryPage from '@/components/VenueCategoryPage';
import Breadcrumbs from '@/components/Breadcrumbs';

const categoryMap = {
  'master-classes': {
    name: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã',
    emoji: 'üé®',
    description: '–ê—Ä—Ç-—Å—Ç—É–¥–∏–∏, –ª–µ–ø–∫–∞, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∫–ª–∞—Å—Å—ã',
    color: 'from-pink-500 to-rose-500',
    bgColor: 'bg-pink-50',
    textColor: 'text-pink-700',
    borderColor: 'border-pink-200'
  },
  'leisure': {
    name: '–ü—Ä–æ—á–∏–π –¥–æ—Å—É–≥',
    emoji: 'üß∏',
    description: '–ó–æ–æ–ø–∞—Ä–∫–∏, —Ç–µ–∞—Ç—Ä—ã, –∞–∫–≤–∞–ø–∞—Ä–∫–∏, —Ñ–µ—Ä–º—ã',
    color: 'from-blue-500 to-cyan-500',
    bgColor: 'bg-blue-50',
    textColor: 'text-blue-700',
    borderColor: 'border-blue-200'
  },
  'sports': {
    name: '–°–ø–æ—Ä—Ç',
    emoji: '‚öΩÔ∏è',
    description: '–°–ø–æ—Ä—Ç—à–∫–æ–ª—ã, —Å–µ–∫—Ü–∏–∏, –±–∞—Å—Å–µ–π–Ω—ã',
    color: 'from-green-500 to-emerald-500',
    bgColor: 'bg-green-50',
    textColor: 'text-green-700',
    borderColor: 'border-green-200'
  },
  'education': {
    name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
    emoji: 'üìö',
    description: '–î–µ—Ç—Å–∞–¥—ã, —à–∫–æ–ª—ã, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞, –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã',
    color: 'from-purple-500 to-violet-500',
    bgColor: 'bg-purple-50',
    textColor: 'text-purple-700',
    borderColor: 'border-purple-200'
  },
  'medicine': {
    name: '–ú–µ–¥–∏—Ü–∏–Ω–∞',
    emoji: 'ü©∫',
    description: '–õ–æ–≥–æ–ø–µ–¥—ã, –¥–µ—Ç—Å–∫–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏, –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∏',
    color: 'from-red-500 to-pink-500',
    bgColor: 'bg-red-50',
    textColor: 'text-red-700',
    borderColor: 'border-red-200'
  },
  'camps': {
    name: '–õ–∞–≥–µ—Ä—è',
    emoji: 'üèï',
    description: '–ì–æ—Ä–æ–¥—Å–∫–∏–µ –∏ –∑–∞–≥–æ—Ä–æ–¥–Ω—ã–µ, —Å —É–∫–ª–æ–Ω–æ–º (—Å–ø–æ—Ä—Ç/–∞—Ä—Ç)',
    color: 'from-orange-500 to-amber-500',
    bgColor: 'bg-orange-50',
    textColor: 'text-orange-700',
    borderColor: 'border-orange-200'
  },
  'nannies': {
    name: '–ù—è–Ω–∏',
    emoji: 'üë©‚Äçüçº',
    description: '–ê–≥–µ–Ω—Ç—Å—Ç–≤–∞, —á–∞—Å—Ç–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏',
    color: 'from-indigo-500 to-blue-500',
    bgColor: 'bg-indigo-50',
    textColor: 'text-indigo-700',
    borderColor: 'border-indigo-200'
  }
};

type Props = {
  params: Promise<{ slug: string; category: string }>;
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
};

export default async function VenueCategoryPageRoute({ params, searchParams }: Props) {
  const { slug, category } = await params;
  const sp = await searchParams;
  const subcategory = sp.subcategory as string;

  // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥
  const city = await prisma.city.findUnique({
    where: { slug, isPublic: true },
    select: { id: true, name: true, slug: true },
  });

  if (!city) {
    notFound();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const categoryInfo = categoryMap[category as keyof typeof categoryMap];
  if (!categoryInfo) {
    notFound();
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å - –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  const displayInfo = subcategory ? {
    name: subcategory,
    emoji: categoryInfo.emoji,
    description: `${subcategory} –≤ ${city.name}`,
    color: categoryInfo.color,
    bgColor: categoryInfo.bgColor,
    textColor: categoryInfo.textColor,
    borderColor: categoryInfo.borderColor
  } : categoryInfo;

  // –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞/—É—Å–ª—É–≥–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const venues = await prisma.listing.findMany({
    where: {
      cityId: city.id,
      type: { in: ['VENUE', 'SERVICE'] },
      isActive: true,
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –ë–î
    },
    include: {
      vendor: {
        select: {
          id: true,
          displayName: true,
          logo: true,
        },
      },
      category: {
        select: {
          id: true,
          name: true,
          slug: true,
        },
      },
      _count: {
        select: {
          Review: true,
          bookings: true,
        },
      },
    },
    orderBy: [
      { isFree: 'asc' },
      { createdAt: 'desc' },
    ],
  });

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≤ –±—É–¥—É—â–µ–º)
  const subcategories = [
    { id: 'all', name: '–í—Å–µ', count: venues.length },
    { id: 'popular', name: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ', count: Math.floor(venues.length * 0.3) },
    { id: 'new', name: '–ù–æ–≤–∏–Ω–∫–∏', count: Math.floor(venues.length * 0.2) },
    { id: 'free', name: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ', count: venues.filter(v => v.isFree).length },
  ];

  return (
    <div>
      <div className="container py-6">
        <Breadcrumbs
          items={[
            { label: '–ì–ª–∞–≤–Ω–∞—è', href: '/' },
            { label: city.name, href: `/city/${city.slug}` },
            { label: '–ú–µ—Å—Ç–∞', href: `/city/${city.slug}/cat/venues` },
            { label: categoryInfo.name, href: `/city/${city.slug}/cat/venues/${category}` },
            ...(subcategory ? [{ label: subcategory, href: `/city/${city.slug}/cat/venues/${category}?subcategory=${subcategory}` }] : [])
          ]}
        />

        <VenueCategoryPage
          categoryInfo={displayInfo}
          cityName={city.name}
          citySlug={city.slug}
          venues={venues as any}
          subcategories={subcategories}
          searchParams={sp}
        />
      </div>
    </div>
  );
}
