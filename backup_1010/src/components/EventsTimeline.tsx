'use client'

import { useState, useEffect } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { getCityWeekend, getCityDayOfWeek } from '@/lib/timezone'
import SearchAutocomplete from './SearchAutocomplete'

interface EventsTimelineProps {
  categoryStats: Array<{ category: string | null; count: number }>
  ageStats: Array<{ label: string; count: number }>
  priceStats: Array<{ label: string; count: number }>
  citySlug: string
  quickFilters?: Array<{
    id: number
    label: string
    queryJson: any
    order: number
  }>
}

export default function EventsTimeline({ 
  categoryStats, 
  ageStats, 
  priceStats,
  citySlug,
  quickFilters = []
}: EventsTimelineProps) {
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedQuickFilters, setSelectedQuickFilters] = useState<number[]>([])
  const router = useRouter()
  const searchParams = useSearchParams()
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ URL
  useEffect(() => {
    const q = searchParams.get('q')
    if (q !== searchQuery) {
      setSearchQuery(q || '')
    }
  }, [searchParams, searchQuery])
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã–º–∏
  const isWeekendRange = (dateFrom: string, dateTo: string) => {
    const fromDate = new Date(dateFrom)
    const toDate = new Date(dateTo)
    const fromDay = fromDate.getDay()
    const toDay = toDate.getDay()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—É–±–±–æ—Ç–∞-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6-0)
    return fromDay === 6 && toDay === 0
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ URL
  const selectedDateFrom = searchParams.get('dateFrom')
  const selectedDateTo = searchParams.get('dateTo')
  const isDateSelected = selectedDateFrom && selectedDateTo && selectedDateFrom === selectedDateTo
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–°–µ–≥–æ–¥–Ω—è"
  const todayDate = new Date().toISOString().split('T')[0]
  const isTodayActive = isDateSelected && selectedDateFrom === todayDate && selectedDateTo === todayDate
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ñ–∏–ª—å—Ç—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö
  const isWeekendActive = selectedDateFrom && selectedDateTo && 
    isWeekendRange(selectedDateFrom, selectedDateTo)

  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  const isFreeActive = searchParams.get('free') === '1'

  const handleDateClick = (urlDate: string) => {
    const url = new URL(window.location.href)
    url.searchParams.set('dateFrom', urlDate)
    url.searchParams.set('dateTo', urlDate)
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    router.push(url.pathname + url.search, { scroll: false })
  }

  const handleAllClick = () => {
    const url = new URL(window.location.href)
    url.searchParams.delete('dateFrom')
    url.searchParams.delete('dateTo')
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è "–í—Å–µ"
    router.push(url.pathname + url.search, { scroll: false })
  }

  const handleTodayClick = () => {
    const today = new Date()
    const year = today.getFullYear()
    const month = String(today.getMonth() + 1).padStart(2, '0')
    const day = String(today.getDate()).padStart(2, '0')
    const todayDate = `${year}-${month}-${day}`
    
    const url = new URL(window.location.href)
    url.searchParams.set('dateFrom', todayDate)
    url.searchParams.set('dateTo', todayDate)
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è "–°–µ–≥–æ–¥–Ω—è"
    router.push(url.pathname + url.search, { scroll: false })
  }

  const handleSearch = (query?: string) => {
    const url = new URL(window.location.href)
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É: –µ—Å–ª–∏ query –ø–µ—Ä–µ–¥–∞–Ω (–¥–∞–∂–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    const searchTerm = query !== undefined ? query : searchQuery
    if (searchTerm.trim()) {
      url.searchParams.set('q', searchTerm.trim())
    } else {
      url.searchParams.delete('q')
    }
    // –ü—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é - —ç—Ç–æ –ª–æ–≥–∏—á–Ω–æ
    url.searchParams.delete('page')
    router.push(url.pathname + url.search, { scroll: false })
  }

  const handleFreeClick = () => {
    const url = new URL(window.location.href)
    const currentFree = url.searchParams.get('free')
    
    if (currentFree === '1') {
      // –ï—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, —É–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
      url.searchParams.delete('free')
    } else {
      // –ï—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –≤–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
      url.searchParams.set('free', '1')
    }
    
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
    router.push(url.pathname + url.search, { scroll: false })
  }

  const handleWeekendClick = () => {
    console.log('üîµ –ö–Ω–æ–ø–∫–∞ "–í—ã—Ö–æ–¥–Ω—ã–µ" –Ω–∞–∂–∞—Ç–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞:', citySlug)
    
    const url = new URL(window.location.href)
    
    console.log('üìÖ –¢–µ–∫—É—â–∏–µ –¥–∞—Ç—ã:', { selectedDateFrom, selectedDateTo })
    console.log('üéØ –§–∏–ª—å—Ç—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –∞–∫—Ç–∏–≤–µ–Ω:', isWeekendActive)
    
    if (isWeekendActive) {
      // –ï—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, —É–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
      console.log('‚ùå –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö')
      url.searchParams.delete('dateFrom')
      url.searchParams.delete('dateTo')
    } else {
      // –ï—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –≤–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö
      console.log('‚úÖ –í–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞:', citySlug)
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –≥–æ—Ä–æ–¥–∞
      const { saturday, sunday } = getCityWeekend(citySlug)
      
      console.log('üìÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –≥–æ—Ä–æ–¥–∞:', { saturday, sunday })
      
      url.searchParams.set('dateFrom', saturday)
      url.searchParams.set('dateTo', sunday)
    }
    
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ "–í—ã—Ö–æ–¥–Ω—ã–µ"
    const newUrl = url.pathname + url.search
    console.log('üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ URL:', newUrl)
    
    router.push(newUrl, { scroll: false })
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleQuickFilterClick = (filterId: number) => {
    const url = new URL(window.location.href)
    const currentFilters = url.searchParams.get('quickFilters')?.split(',').map(Number) || []
    
    let newFilters: number[]
    if (currentFilters.includes(filterId)) {
      // –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
      newFilters = currentFilters.filter(id => id !== filterId)
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
      newFilters = [...currentFilters, filterId]
    }
    
    if (newFilters.length > 0) {
      url.searchParams.set('quickFilters', newFilters.join(','))
    } else {
      url.searchParams.delete('quickFilters')
    }
    
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    router.push(url.pathname + url.search, { scroll: false })
  }

  const isQuickFilterActive = (filterId: number) => {
    const currentFilters = searchParams.get('quickFilters')?.split(',').map(Number) || []
    return currentFilters.includes(filterId)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã–º –¥–Ω–µ–º
  const isWeekendDate = (dateString: string) => {
    const date = new Date(dateString)
    const day = date.getDay()
    return day === 6 || day === 0 // –°—É–±–±–æ—Ç–∞ (6) –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (0)
  }

  const handleCategoryChange = (category: string, checked: boolean) => {
    if (!category) return
    
    const url = new URL(window.location.href)
    const categoriesParam = url.searchParams.get('categories')
    const currentCategories: string[] = categoriesParam ? categoriesParam.split(',') : []
    
    if (checked) {
      if (!currentCategories.includes(category)) {
        currentCategories.push(category)
      }
    } else {
      const index = currentCategories.indexOf(category)
      if (index > -1) {
        currentCategories.splice(index, 1)
      }
    }
    
        if (currentCategories.length > 0) {
          url.searchParams.set('categories', currentCategories.join(','))
        } else {
          url.searchParams.delete('categories')
        }
        // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        router.push(url.pathname + url.search, { scroll: false })
  }

  const handleAgeChange = (label: string, checked: boolean) => {
    let min: number, max: number
    
    if (label.includes('+')) {
      min = parseInt(label.replace('+ –ª–µ—Ç', ''))
      max = 99
    } else {
      const parts = label.split('‚Äì').map(Number)
      min = parts[0] || 0
      max = parts[1] || 99
    }
    
    const url = new URL(window.location.href)
    const currentAgeMin = url.searchParams.get('ageMin')
    const currentAgeMax = url.searchParams.get('ageMax')
    
    if (checked) {
      if (!currentAgeMin || min < parseInt(currentAgeMin || '0')) {
        url.searchParams.set('ageMin', min.toString())
      }
      if (!currentAgeMax || max > parseInt(currentAgeMax || '99')) {
        url.searchParams.set('ageMax', max.toString())
      }
    } else {
      url.searchParams.delete('ageMin')
      url.searchParams.delete('ageMax')
    }
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞
    router.push(url.pathname + url.search, { scroll: false })
  }

  const handlePriceChange = (label: string, checked: boolean) => {
    const url = new URL(window.location.href)
    
    if (checked) {
      if (label === '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ') {
        url.searchParams.set('free', '1')
      } else if (label.includes('–î–æ 500')) {
        url.searchParams.set('priceMax', '500')
      } else if (label.includes('500-1000')) {
        url.searchParams.set('priceMin', '500')
        url.searchParams.set('priceMax', '1000')
      } else if (label.includes('1000+')) {
        url.searchParams.set('priceMin', '1000')
      }
    } else {
      if (label === '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ') {
        url.searchParams.delete('free')
      } else if (label.includes('–î–æ 500')) {
        url.searchParams.delete('priceMax')
      } else if (label.includes('500-1000')) {
        url.searchParams.delete('priceMin')
        url.searchParams.delete('priceMax')
      } else if (label.includes('1000+')) {
        url.searchParams.delete('priceMin')
      }
        }
        // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è —Ü–µ–Ω—ã
        router.push(url.pathname + url.search, { scroll: false })
  }

  return (
    <>
      {/* Date Picker Timeline */}
      <div className="flex space-x-2 mb-6 overflow-x-auto">
        {/* –ö–Ω–æ–ø–∫–∞ "–í—Å–µ" */}
        <button 
          className={`px-4 py-2 rounded-lg whitespace-nowrap transition-colors ${
            !isDateSelected 
              ? 'bg-red-600 text-white hover:bg-red-700' 
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
          onClick={handleAllClick}
        >
          –í—Å–µ
        </button>
        
        {/* –ö–Ω–æ–ø–∫–∞ "–°–µ–≥–æ–¥–Ω—è" */}
        <button 
          className={`px-4 py-2 rounded-lg whitespace-nowrap transition-colors ${
            isTodayActive
              ? 'bg-red-600 text-white hover:bg-red-700' 
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
          onClick={handleTodayClick}
        >
          –°–µ–≥–æ–¥–Ω—è
        </button>
        
        {/* –î–∞—Ç—ã —Å —Ñ–ª–∞–∂–∫–∞–º–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö */}
        {Array.from({ length: 17 }, (_, i) => {
          const today = new Date()
          const targetDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + i + 1) // +1 —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å –∑–∞–≤—Ç—Ä–∞
          const dayOfWeek = targetDate.getDay()
          const isWeekend = dayOfWeek === 0 || dayOfWeek === 6 // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ —Å—É–±–±–æ—Ç–∞
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const day = targetDate.getDate()
          const month = targetDate.toLocaleDateString('ru', { month: 'short' })
          const dateString = `${day} ${month}`
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è URL (YYYY-MM-DD) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
          const year = targetDate.getFullYear()
          const monthNum = String(targetDate.getMonth() + 1).padStart(2, '0')
          const dayNum = String(targetDate.getDate()).padStart(2, '0')
          const urlDate = `${year}-${monthNum}-${dayNum}`
          
          let flagElement = null
          
          if (isWeekend) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ñ–ª–∞–∂–∫–∞: –°–ë –¥–ª—è —Å—É–±–±–æ—Ç—ã, –í–° –¥–ª—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
            const flagText = dayOfWeek === 6 ? '–°–ë' : '–í–°'
            
            flagElement = (
              <div className="absolute -top-1 -right-1 bg-red-500 text-white text-xs px-1 py-0.5 rounded-bl-lg rounded-tr-lg font-bold">
                {flagText}
              </div>
            )
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —ç—Ç–∞ –¥–∞—Ç–∞
          const isSelected = isDateSelected && selectedDateFrom === urlDate
          
          return (
            <button
              key={i}
              className={`relative px-4 py-2 rounded-lg whitespace-nowrap transition-colors ${
                isSelected 
                  ? 'bg-red-600 text-white hover:bg-red-700' 
                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }`}
              onClick={() => handleDateClick(urlDate)}
            >
              {dateString}
              {flagElement}
            </button>
          )
        })}
      </div>

      {/* Quick Filters */}
      <div className="flex space-x-4 mb-6">
        <SearchAutocomplete 
          citySlug={citySlug}
          onSearch={handleSearch}
          initialQuery={searchQuery}
        />
        <button 
          className={`rounded-lg px-4 py-2 transition-colors ${
            isFreeActive 
              ? 'bg-red-600 text-white hover:bg-red-700' 
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
          onClick={handleFreeClick}
        >
          –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
        </button>
        <button 
          className={`rounded-lg px-4 py-2 transition-colors ${
            isWeekendActive 
              ? 'bg-red-600 text-white hover:bg-red-700' 
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
          onClick={handleWeekendClick}
        >
          –í—ã—Ö–æ–¥–Ω—ã–µ
        </button>
        
        {/* –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
        {quickFilters.map((filter) => (
          <button
            key={filter.id}
            className={`rounded-lg px-4 py-2 transition-colors ${
              isQuickFilterActive(filter.id)
                ? 'bg-red-600 text-white hover:bg-red-700'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
            onClick={() => handleQuickFilterClick(filter.id)}
          >
            {filter.label}
          </button>
        ))}
      </div>

    </>
  )
}
