'use client'

import { useState, useEffect } from 'react'
import { useAuth } from '@/contexts/AuthContext'

export default function TestCreateReviewsPage() {
  const { user, loading } = useAuth()
  const [events, setEvents] = useState<any[]>([])
  const [loadingEvents, setLoadingEvents] = useState(true)
  const [result, setResult] = useState<string | null>(null)
  const [selectedEvent, setSelectedEvent] = useState<string>('')

  useEffect(() => {
    if (loading || !user) return
    fetchEvents()
  }, [loading, user])

  const fetchEvents = async () => {
    try {
      setLoadingEvents(true)
      const response = await fetch('/api/simple-events?limit=10')
      if (response.ok) {
        const data = await response.json()
        setEvents(data.events || [])
        if (data.events && data.events.length > 0) {
          setSelectedEvent(data.events[0].id)
        }
      }
    } catch (error) {
      console.error('Error fetching events:', error)
    } finally {
      setLoadingEvents(false)
    }
  }

  const createTestReviews = async () => {
    if (!user?.id || !selectedEvent) {
      setResult('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ')
      return
    }

    setResult(null)

    try {
      console.log('üîç Creating test reviews for event:', selectedEvent, 'user:', user.id)
      
      const reviews = [
        {
          eventId: selectedEvent,
          userId: user.id,
          rating: 5,
          comment: '–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! –†–µ–±–µ–Ω–æ–∫ –±—ã–ª –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ!'
        },
        {
          eventId: selectedEvent,
          userId: user.id,
          rating: 4,
          comment: '–•–æ—Ä–æ—à–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ª—É—á—à–µ.'
        },
        {
          eventId: selectedEvent,
          userId: user.id,
          rating: 5,
          comment: '–°—É–ø–µ—Ä! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–π–¥–µ–º –µ—â–µ —Ä–∞–∑!'
        }
      ]

      let createdCount = 0
      for (const review of reviews) {
        const response = await fetch('/api/simple-create-review', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(review)
        })

        if (response.ok) {
          const data = await response.json()
          console.log('‚úÖ Review created:', data)
          createdCount++
        } else {
          const error = await response.json()
          console.error('‚ùå Review creation error:', error)
        }
      }

      setResult(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdCount} –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ ${reviews.length}`)
    } catch (error) {
      console.error('‚ùå Error creating reviews:', error)
      setResult(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
  }

  const createTestEvent = async () => {
    if (!user?.id) {
      setResult('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      return
    }

    setResult(null)

    try {
      console.log('üîç Creating test event for user:', user.id)
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      let categoryId = 2 // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–¢–µ–∞—Ç—Ä—ã"
      try {
        const categoryResponse = await fetch('/api/admin/categories')
        if (categoryResponse.ok) {
          const categoryData = await categoryResponse.json()
          if (categoryData.categories && categoryData.categories.length > 0) {
            categoryId = categoryData.categories[0].id
            console.log('‚úÖ Using existing category:', categoryId, categoryData.categories[0].name)
          }
        }
      } catch (categoryError) {
        console.log('‚ö†Ô∏è Error fetching categories, using default ID 2')
      }
      
      const eventData = {
        title: `–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ ${Date.now()}`,
        description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∑—ã–≤–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.',
        startDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
        endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000 + 2 * 60 * 60 * 1000).toISOString(), // +2 —á–∞—Å–∞
        venue: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ª',
        organizer: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä',
        coordinates: '55.7558,37.6176', // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã
        city: '–ú–æ—Å–∫–≤–∞',
        citySlug: 'moskva',
        category: '–¢–µ–∞—Ç—Ä—ã',
        categoryId: categoryId,
        minPrice: 1000, // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        ageFrom: 3,
        ageTo: 12,
        ageGroups: '3-6,7-12',
        isPaid: true,
        isPopular: false,
        isPromoted: false,
        priority: 5,
        searchText: '—Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤',
        status: 'active'
      }

      const response = await fetch('/api/simple-events', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(eventData)
      })

      if (response.ok) {
        const data = await response.json()
        console.log('‚úÖ Event created:', data)
        setResult(`‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ${data.event?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`)
        await fetchEvents() // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
      } else {
        const error = await response.json()
        console.error('‚ùå Event creation error:', error)
        setResult(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ${error.error}`)
      }
    } catch (error) {
      console.error('‚ùå Error creating event:', error)
      setResult(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</h1>
          <p className="text-gray-600">–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <h1 className="text-3xl font-bold text-gray-900 mb-8 font-unbounded">
          –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
        </h1>
        
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4 font-unbounded">
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name || user.email} (ID: {user.id})
          </h2>
          
          <div className="space-y-4">
            <button
              onClick={createTestEvent}
              className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-unbounded"
            >
              –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
            </button>

            <button
              onClick={fetchEvents}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-unbounded ml-4"
            >
              –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
            </button>
          </div>

          {result && (
            <div className={`mt-4 p-4 rounded-lg ${
              result.includes('‚úÖ') ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'
            }`}>
              <p className={`font-unbounded ${
                result.includes('‚úÖ') ? 'text-green-800' : 'text-red-800'
              }`}>
                {result}
              </p>
            </div>
          )}
        </div>

        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4 font-unbounded">
            –°–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
          </h2>

          {loadingEvents ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-600 font-unbounded">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...</p>
            </div>
          ) : events.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500 font-unbounded">–°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
              <p className="text-sm text-gray-400 font-unbounded mt-2">
                –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤—ã—à–µ
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2 font-unbounded">
                  –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:
                </label>
                <select
                  value={selectedEvent}
                  onChange={(e) => setSelectedEvent(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-unbounded"
                >
                  {events.map((event) => (
                    <option key={event.id} value={event.id}>
                      {event.title} ({event.slug})
                    </option>
                  ))}
                </select>
              </div>

              <button
                onClick={createTestReviews}
                disabled={!selectedEvent}
                className="px-6 py-3 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors font-unbounded disabled:opacity-50"
              >
                –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã
              </button>
            </div>
          )}
        </div>

        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <h3 className="font-semibold text-yellow-800 mb-2 font-unbounded">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>
          <ul className="text-sm text-yellow-700 space-y-1 font-unbounded">
            <li>‚Ä¢ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ</li>
            <li>‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞</li>
            <li>‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã</li>
            <li>‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</li>
            <li>‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã</li>
          </ul>
        </div>
      </div>
    </div>
  )
}
