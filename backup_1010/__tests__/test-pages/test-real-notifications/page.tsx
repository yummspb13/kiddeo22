'use client'

import { useState, useEffect } from 'react'
import { useAuth } from '@/contexts/AuthContext'

export default function TestRealNotificationsPage() {
  const { user, loading } = useAuth()
  const [reviews, setReviews] = useState<any[]>([])
  const [loadingReviews, setLoadingReviews] = useState(true)
  const [result, setResult] = useState<string | null>(null)

  useEffect(() => {
    if (loading || !user) return
    fetchReviews()
  }, [loading, user])

  const fetchReviews = async () => {
    try {
      setLoadingReviews(true)
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–≤–∫–ª—é—á–∞—è —Ä–µ–∞–ª—å–Ω—ã–µ ID –∏–∑ –±–∞–∑—ã)
      const eventIds = [
        'cmgbg6mso000ckvl8l4yx2ysh', // –ò–∑—É–º—Ä—É–¥–Ω—ã–π –≥–æ—Ä–æ–¥ (–µ—Å—Ç—å –æ—Ç–∑—ã–≤—ã)
        'izumrudnyy-gorod', // –°–ª–∞–≥ —Å–æ–±—ã—Ç–∏—è
        'test-event-1', 
        'test-event-2'
      ]
      let reviews: any[] = []
      
      for (const eventId of eventIds) {
        const response = await fetch(`/api/simple-reviews?eventId=${eventId}&status=APPROVED`)
        if (response.ok) {
          const data = await response.json()
          if (data.reviews && data.reviews.length > 0) {
            reviews = [...reviews, ...data.reviews]
            break // –ù–∞—à–ª–∏ –æ—Ç–∑—ã–≤—ã, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
          }
        }
      }
      
      setReviews(reviews)
    } catch (error) {
      console.error('Error fetching reviews:', error)
    } finally {
      setLoadingReviews(false)
    }
  }

  const testReaction = async (reviewId: string) => {
    if (!user?.id) {
      setResult('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      return
    }

    setResult(null)

    try {
      console.log('üîç Testing reaction for review:', reviewId, 'user:', user.id)
      
      const response = await fetch('/api/simple-reactions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          reviewId: reviewId,
          userId: user.id,
          type: 'LIKE'
        })
      })

      console.log('üîç Reaction response status:', response.status)
      
      if (response.ok) {
        const data = await response.json()
        console.log('‚úÖ Reaction response:', data)
        setResult(`‚úÖ –†–µ–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${JSON.stringify(data)}`)
        await fetchReviews() // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
      } else {
        const error = await response.json()
        console.error('‚ùå Reaction error:', error)
        setResult(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏: ${error.error}`)
      }
    } catch (error) {
      console.error('‚ùå Error testing reaction:', error)
      setResult(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
  }

  const testReply = async (reviewId: string) => {
    if (!user?.id) {
      setResult('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      return
    }

    setResult(null)

    try {
      console.log('üîç Testing reply for review:', reviewId, 'user:', user.id)
      
      const response = await fetch(`/api/reviews/${reviewId}/replies`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: user.id,
          message: `–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name || user.email}`
        })
      })

      console.log('üîç Reply response status:', response.status)
      
      if (response.ok) {
        const data = await response.json()
        console.log('‚úÖ Reply response:', data)
        setResult(`‚úÖ –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω: ${JSON.stringify(data)}`)
        await fetchReviews() // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
      } else {
        const error = await response.json()
        console.error('‚ùå Reply error:', error)
        setResult(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: ${error.error}`)
      }
    } catch (error) {
      console.error('‚ùå Error testing reply:', error)
      setResult(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</h1>
          <p className="text-gray-600">–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <h1 className="text-3xl font-bold text-gray-900 mb-8 font-unbounded">
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        </h1>
        
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4 font-unbounded">
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name || user.email} (ID: {user.id})
          </h2>
          
          <div className="mb-4">
            <button
              onClick={fetchReviews}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-unbounded"
            >
              –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∑—ã–≤—ã
            </button>
            <p className="text-sm text-gray-600 mt-2 font-unbounded">
              –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è: –ò–∑—É–º—Ä—É–¥–Ω—ã–π –≥–æ—Ä–æ–¥ (ID: cmgbg6mso000ckvl8l4yx2ysh), izumrudnyy-gorod, test-event-1, test-event-2
            </p>
          </div>

          {result && (
            <div className={`p-4 rounded-lg ${
              result.includes('‚úÖ') ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'
            }`}>
              <p className={`font-unbounded ${
                result.includes('‚úÖ') ? 'text-green-800' : 'text-red-800'
              }`}>
                {result}
              </p>
            </div>
          )}
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4 font-unbounded">
            –û—Ç–∑—ã–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          </h2>

          {loadingReviews ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-600 font-unbounded">–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤...</p>
            </div>
          ) : reviews.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500 font-unbounded">–û—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
            </div>
          ) : (
            <div className="space-y-4">
              {reviews.map((review) => (
                <div key={review.id} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <h3 className="font-semibold text-gray-900 font-unbounded">
                          {review.user.name || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                        </h3>
                        <span className="text-sm text-gray-500 font-unbounded">
                          (ID: {review.user.id})
                        </span>
                      </div>
                      <p className="text-gray-700 mb-2 font-unbounded">
                        {review.comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}
                      </p>
                      <div className="text-sm text-gray-500 font-unbounded">
                        –û—Ç–∑—ã–≤ ID: {review.id} | –†–µ–π—Ç–∏–Ω–≥: {review.rating}/5
                      </div>
                    </div>
                    <div className="flex space-x-2 ml-4">
                      <button
                        onClick={() => testReaction(review.id)}
                        className="px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700 transition-colors font-unbounded"
                      >
                        –õ–∞–π–∫
                      </button>
                      <button
                        onClick={() => testReply(review.id)}
                        className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 transition-colors font-unbounded"
                      >
                        –û—Ç–≤–µ—Ç–∏—Ç—å
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        <div className="mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <h3 className="font-semibold text-yellow-800 mb-2 font-unbounded">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>
          <ul className="text-sm text-yellow-700 space-y-1 font-unbounded">
            <li>‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–õ–∞–π–∫" —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –æ—Ç–∑—ã–≤</li>
            <li>‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–û—Ç–≤–µ—Ç–∏—Ç—å" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤</li>
            <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞</li>
            <li>‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</li>
          </ul>
        </div>
      </div>
    </div>
  )
}
